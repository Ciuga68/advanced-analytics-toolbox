{"version":3,"sources":["chart/tree_chart_org.js"],"names":["define","utils","d3","draw","$scope","app","treeData","elementId","customOptions","collapse","d","children","_children","forEach","collapseAll","layout","props","defaultCollapseLevel","depth","update","source","diagonal","s","path","y","x","click","replaceParamNamesWithLabel","description","result","i","paramNames","length","replace","measureLabels","treemap","root","nodes","descendants","links","slice","node","svg","selectAll","data","id","nodeEnter","enter","append","attr","y0","x0","on","style","text","rpartMethod","levelsList","yval","nodeUpdate","merge","transition","duration","select","nodeExit","exit","remove","link","linkEnter","insert","o","linkUpdate","parent","margin","top","right","bottom","left","width","height","tree","size","hierarchy"],"mappings":"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","file":"../../js/chart/tree_chart_org.js","sourcesContent":["define([\r\n  '../util/utils',\r\n  '../../vendor/d3.min',\r\n], (utils, d3) => {\r\n  return {\r\n\r\n    /**\r\n     * draw - draw chart\r\n     *\r\n     * @param {Object} $scope        angular $scope\r\n     * @param {Object} treeData          Data for chart\r\n     * @param {String} elementId     HTML element id to embed chart\r\n     * @param {Object} customOptions Custom chart options\r\n     *\r\n     * @return {Object} Chart object\r\n     */\r\n    draw($scope, app, treeData, elementId, customOptions) {\r\n\r\n      // Set the dimensions and margins of the diagram\r\n      var margin = {top: 20, right: 90, bottom: 30, left: 90},\r\n          width = 960 - margin.left - margin.right,\r\n          height = 500 - margin.top - margin.bottom;\r\n\r\n      // append the svg object to the body of the page\r\n      // appends a 'group' element to 'svg'\r\n      // moves the 'group' element to the top left margin\r\n      var svg = d3.select(`div#${elementId}`).append(\"svg\")\r\n          .attr(\"width\", width + margin.right + margin.left)\r\n          .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n          .attr(\"transform\", \"translate(\"\r\n                + margin.left + \",\" + margin.top + \")\");\r\n\r\n      var i = 0,\r\n          duration = 750,\r\n          root;\r\n\r\n      // declares a tree layout and assigns the size\r\n      var treemap = d3.tree().size([height, width]);\r\n\r\n      // Assigns parent, children, height, depth\r\n      root = d3.hierarchy(treeData, function(d) { return d.children; });\r\n      root.x0 = height / 2;\r\n      root.y0 = 0;\r\n\r\n      // Collapse after the second level\r\n      root.children.forEach(collapseAll);\r\n\r\n      update(root);\r\n\r\n      // Collapse the node and all it's children\r\n      function collapse(d) {\r\n        if(d.children) {\r\n          d._children = d.children\r\n          d._children.forEach(collapse)\r\n          d.children = null\r\n        }\r\n      }\r\n\r\n      // Collapse all child nodes\r\n      function collapseAll(d) {\r\n        if (d.children) {\r\n          d.children.forEach(collapseAll);\r\n          if (typeof $scope.layout.props.defaultCollapseLevel !== 'undefined' && d.depth >= $scope.layout.props.defaultCollapseLevel) {\r\n            collapse(d);\r\n          }\r\n        }\r\n      }\r\n\r\n      function update(source) {\r\n        // Assigns the x and y position for the nodes\r\n        var treeData = treemap(root);\r\n\r\n        // Compute the new tree layout.\r\n        var nodes = treeData.descendants(),\r\n            links = treeData.descendants().slice(1);\r\n\r\n        // Normalize for fixed-depth.\r\n        nodes.forEach(function(d){ d.y = d.depth * 180});\r\n\r\n        // ****************** Nodes section ***************************\r\n\r\n        // Update the nodes...\r\n        var node = svg.selectAll('g.node')\r\n            .data(nodes, function(d) {return d.id || (d.id = ++i); });\r\n\r\n        // Enter any new modes at the parent's previous position.\r\n        var nodeEnter = node.enter().append('g')\r\n            .attr('class', 'node')\r\n            .attr(\"transform\", function(d) {\r\n              return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\r\n          })\r\n          .on('click', click);\r\n\r\n        // Add Circle for the nodes\r\n        nodeEnter.append('circle')\r\n            .attr('class', 'node')\r\n            .attr('r', 1e-6)\r\n            .style(\"fill\", function(d) {\r\n                return d._children ? \"lightsteelblue\" : \"#fff\";\r\n            });\r\n\r\n        // Add labels for the nodes\r\n        nodeEnter.append('text')\r\n            .attr(\"dy\", \".35em\")\r\n            .attr(\"x\", function(d) {\r\n                return d.children || d._children ? -13 : 13;\r\n            })\r\n            .attr(\"text-anchor\", function(d) {\r\n                return d.children || d._children ? \"end\" : \"start\";\r\n            })\r\n            .text(function(d) {\r\n              if (d.children || d._children) {\r\n               return replaceParamNamesWithLabel(d.data.description);\r\n             } else {\r\n               if($scope.layout.props.rpartMethod == 'class') {\r\n                 return replaceParamNamesWithLabel(d.data.description) + ' - ' + $scope.levelsList[d.data.yval - 1];\r\n               } else {\r\n                 return replaceParamNamesWithLabel(d.data.description) + ' - ' + d.data.yval;\r\n               }\r\n             }\r\n            });\r\n\r\n        // UPDATE\r\n        var nodeUpdate = nodeEnter.merge(node);\r\n\r\n        // Transition to the proper position for the node\r\n        nodeUpdate.transition()\r\n          .duration(duration)\r\n          .attr(\"transform\", function(d) {\r\n              return \"translate(\" + d.y + \",\" + d.x + \")\";\r\n           });\r\n\r\n        // Update the node attributes and style\r\n        nodeUpdate.select('circle.node')\r\n          .attr('r', 10)\r\n          .style(\"fill\", function(d) {\r\n              return d._children ? \"lightsteelblue\" : \"#fff\";\r\n          })\r\n          .attr('cursor', 'pointer');\r\n\r\n\r\n        // Remove any exiting nodes\r\n        var nodeExit = node.exit().transition()\r\n            .duration(duration)\r\n            .attr(\"transform\", function(d) {\r\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\r\n            })\r\n            .remove();\r\n\r\n        // On exit reduce the node circles size to 0\r\n        nodeExit.select('circle')\r\n          .attr('r', 1e-6);\r\n\r\n        // On exit reduce the opacity of text labels\r\n        nodeExit.select('text')\r\n          .style('fill-opacity', 1e-6);\r\n\r\n        // ****************** links section ***************************\r\n\r\n        // Update the links...\r\n        var link = svg.selectAll('path.link')\r\n            .data(links, function(d) { return d.id; });\r\n\r\n        // Enter any new links at the parent's previous position.\r\n        var linkEnter = link.enter().insert('path', \"g\")\r\n            .attr(\"class\", \"link\")\r\n            .attr('d', function(d){\r\n              var o = {x: source.x0, y: source.y0}\r\n              return diagonal(o, o)\r\n            });\r\n\r\n        // UPDATE\r\n        var linkUpdate = linkEnter.merge(link);\r\n\r\n        // Transition back to the parent element position\r\n        linkUpdate.transition()\r\n            .duration(duration)\r\n            .attr('d', function(d){ return diagonal(d, d.parent) });\r\n\r\n        // Remove any exiting links\r\n        var linkExit = link.exit().transition()\r\n            .duration(duration)\r\n            .attr('d', function(d) {\r\n              var o = {x: source.x, y: source.y}\r\n              return diagonal(o, o)\r\n            })\r\n            .remove();\r\n\r\n        // Store the old positions for transition.\r\n        nodes.forEach(function(d){\r\n          d.x0 = d.x;\r\n          d.y0 = d.y;\r\n        });\r\n\r\n        // Creates a curved (diagonal) path from parent to the child nodes\r\n        function diagonal(s, d) {\r\n\r\n          var path = `M ${s.y} ${s.x}\r\n                  C ${(s.y + d.y) / 2} ${s.x},\r\n                    ${(s.y + d.y) / 2} ${d.x},\r\n                    ${d.y} ${d.x}`\r\n\r\n          return path\r\n        }\r\n\r\n        // Toggle children on click.\r\n        function click(d) {\r\n          if (d.children) {\r\n              d._children = d.children;\r\n              d.children = null;\r\n            } else {\r\n              d.children = d._children;\r\n              d._children = null;\r\n            }\r\n          update(d);\r\n        }\r\n\r\n        // Replace param names (q$meaX) to a measure label in description\r\n        function replaceParamNamesWithLabel(description) {\r\n          let result = description;\r\n          for (let i = 0; i < $scope.paramNames.length; i++) {\r\n            result = result.replace($scope.paramNames[i], $scope.measureLabels[i]);\r\n          }\r\n          return result;\r\n        }\r\n      }\r\n    },\r\n  };\r\n});\r\n"]}