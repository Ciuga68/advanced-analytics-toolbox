{"version":3,"sources":["chart/tree.js"],"names":["define","utils","jqcloud","draw","$scope","data","elementId","customOptions","collapse","d","children","_children","forEach","update","source","diagonal","s","path","y","x","click","treeData","treemap","root","nodes","descendants","links","slice","depth","node","svg","selectAll","id","i","nodeEnter","enter","append","attr","y0","x0","on","style","text","name","nodeUpdate","merge","transition","duration","select","nodeExit","exit","remove","link","linkEnter","insert","o","linkUpdate","parent","margin","top","right","bottom","left","width","height","d3","tree","size","hierarchy"],"mappings":"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","file":"../../js/chart/tree.js","sourcesContent":["define([\r\n  '../util/utils',\r\n  '../../vendor/tree',\r\n], (utils, jqcloud) => {\r\n  return {\r\n\r\n    /**\r\n     * draw - draw chart\r\n     *\r\n     * @param {Object} $scope        angular $scope\r\n     * @param {Object} data          Data for chart\r\n     * @param {String} elementId     HTML element id to embed chart\r\n     * @param {Object} customOptions Custom chart options\r\n     *\r\n     * @return {Object} Chart object\r\n     */\r\n    draw($scope, data, elementId, customOptions) {\r\n      var treeData =\r\n        {\r\n          \"name\": \"Top Level\",\r\n          \"children\": [\r\n            {\r\n              \"name\": \"Level 2: A\",\r\n              \"children\": [\r\n                { \"name\": \"Son of A\" },\r\n                { \"name\": \"Daughter of A\" }\r\n              ]\r\n            },\r\n            { \"name\": \"Level 2: B\" }\r\n          ]\r\n        };\r\n\r\n      // Set the dimensions and margins of the diagram\r\n      var margin = {top: 20, right: 90, bottom: 30, left: 90},\r\n          width = 960 - margin.left - margin.right,\r\n          height = 500 - margin.top - margin.bottom;\r\n\r\n      // append the svg object to the body of the page\r\n      // appends a 'group' element to 'svg'\r\n      // moves the 'group' element to the top left margin\r\n      var svg = d3.select(\"body\").append(\"svg\")\r\n          .attr(\"width\", width + margin.right + margin.left)\r\n          .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n          .attr(\"transform\", \"translate(\"\r\n                + margin.left + \",\" + margin.top + \")\");\r\n\r\n      var i = 0,\r\n          duration = 750,\r\n          root;\r\n\r\n      // declares a tree layout and assigns the size\r\n      var treemap = d3.tree().size([height, width]);\r\n\r\n      // Assigns parent, children, height, depth\r\n      root = d3.hierarchy(treeData, function(d) { return d.children; });\r\n      root.x0 = height / 2;\r\n      root.y0 = 0;\r\n\r\n      // Collapse after the second level\r\n      root.children.forEach(collapse);\r\n\r\n      update(root);\r\n\r\n      // Collapse the node and all it's children\r\n      function collapse(d) {\r\n        if(d.children) {\r\n          d._children = d.children\r\n          d._children.forEach(collapse)\r\n          d.children = null\r\n        }\r\n      }\r\n\r\n      function update(source) {\r\n\r\n        // Assigns the x and y position for the nodes\r\n        var treeData = treemap(root);\r\n\r\n        // Compute the new tree layout.\r\n        var nodes = treeData.descendants(),\r\n            links = treeData.descendants().slice(1);\r\n\r\n        // Normalize for fixed-depth.\r\n        nodes.forEach(function(d){ d.y = d.depth * 180});\r\n\r\n        // ****************** Nodes section ***************************\r\n\r\n        // Update the nodes...\r\n        var node = svg.selectAll('g.node')\r\n            .data(nodes, function(d) {return d.id || (d.id = ++i); });\r\n\r\n        // Enter any new modes at the parent's previous position.\r\n        var nodeEnter = node.enter().append('g')\r\n            .attr('class', 'node')\r\n            .attr(\"transform\", function(d) {\r\n              return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\r\n          })\r\n          .on('click', click);\r\n\r\n        // Add Circle for the nodes\r\n        nodeEnter.append('circle')\r\n            .attr('class', 'node')\r\n            .attr('r', 1e-6)\r\n            .style(\"fill\", function(d) {\r\n                return d._children ? \"lightsteelblue\" : \"#fff\";\r\n            });\r\n\r\n        // Add labels for the nodes\r\n        nodeEnter.append('text')\r\n            .attr(\"dy\", \".35em\")\r\n            .attr(\"x\", function(d) {\r\n                return d.children || d._children ? -13 : 13;\r\n            })\r\n            .attr(\"text-anchor\", function(d) {\r\n                return d.children || d._children ? \"end\" : \"start\";\r\n            })\r\n            .text(function(d) { return d.data.name; });\r\n\r\n        // UPDATE\r\n        var nodeUpdate = nodeEnter.merge(node);\r\n\r\n        // Transition to the proper position for the node\r\n        nodeUpdate.transition()\r\n          .duration(duration)\r\n          .attr(\"transform\", function(d) {\r\n              return \"translate(\" + d.y + \",\" + d.x + \")\";\r\n           });\r\n\r\n        // Update the node attributes and style\r\n        nodeUpdate.select('circle.node')\r\n          .attr('r', 10)\r\n          .style(\"fill\", function(d) {\r\n              return d._children ? \"lightsteelblue\" : \"#fff\";\r\n          })\r\n          .attr('cursor', 'pointer');\r\n\r\n\r\n        // Remove any exiting nodes\r\n        var nodeExit = node.exit().transition()\r\n            .duration(duration)\r\n            .attr(\"transform\", function(d) {\r\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\r\n            })\r\n            .remove();\r\n\r\n        // On exit reduce the node circles size to 0\r\n        nodeExit.select('circle')\r\n          .attr('r', 1e-6);\r\n\r\n        // On exit reduce the opacity of text labels\r\n        nodeExit.select('text')\r\n          .style('fill-opacity', 1e-6);\r\n\r\n        // ****************** links section ***************************\r\n\r\n        // Update the links...\r\n        var link = svg.selectAll('path.link')\r\n            .data(links, function(d) { return d.id; });\r\n\r\n        // Enter any new links at the parent's previous position.\r\n        var linkEnter = link.enter().insert('path', \"g\")\r\n            .attr(\"class\", \"link\")\r\n            .attr('d', function(d){\r\n              var o = {x: source.x0, y: source.y0}\r\n              return diagonal(o, o)\r\n            });\r\n\r\n        // UPDATE\r\n        var linkUpdate = linkEnter.merge(link);\r\n\r\n        // Transition back to the parent element position\r\n        linkUpdate.transition()\r\n            .duration(duration)\r\n            .attr('d', function(d){ return diagonal(d, d.parent) });\r\n\r\n        // Remove any exiting links\r\n        var linkExit = link.exit().transition()\r\n            .duration(duration)\r\n            .attr('d', function(d) {\r\n              var o = {x: source.x, y: source.y}\r\n              return diagonal(o, o)\r\n            })\r\n            .remove();\r\n\r\n        // Store the old positions for transition.\r\n        nodes.forEach(function(d){\r\n          d.x0 = d.x;\r\n          d.y0 = d.y;\r\n        });\r\n\r\n        // Creates a curved (diagonal) path from parent to the child nodes\r\n        function diagonal(s, d) {\r\n\r\n          path = `M ${s.y} ${s.x}\r\n                  C ${(s.y + d.y) / 2} ${s.x},\r\n                    ${(s.y + d.y) / 2} ${d.x},\r\n                    ${d.y} ${d.x}`\r\n\r\n          return path\r\n        }\r\n\r\n        // Toggle children on click.\r\n        function click(d) {\r\n          if (d.children) {\r\n              d._children = d.children;\r\n              d.children = null;\r\n            } else {\r\n              d.children = d._children;\r\n              d._children = null;\r\n            }\r\n          update(d);\r\n        }\r\n      }\r\n    },\r\n  };\r\n});\r\n"]}