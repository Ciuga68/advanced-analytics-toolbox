{"version":3,"sources":["chart/bubble_chart.js"],"names":["define","Plotly","utils","draw","$scope","app","data","elementId","customOptions","options","showlegend","layout","props","showLegend","xaxis","title","xLabelsAndTitle","measures","label","showgrid","xScale","side","xAxisPosition","tickformat","getTickFormat","tickprefix","getPrefix","ticksuffix","getSuffix","yaxis","yLabelsAndTitle","yScale","yAxisPosition","separators","getSeparators","dragmode","margin","r","l","t","b","$","extend","config","scrollZoom","showLink","displaylogo","modeBarButtonsToRemove","chart","document","getElementById","plot","setEvents","on","eventData","points","length","fields","map","d","text","pointNumber","parseInt","elemNum","filter","x","self","selectValues","field","dimensions","expression"],"mappings":"AAAA,YAAAA,SACE,0BACA,iBACC,SAACC,EAAQC,GACV,OAWEC,KAXK,SAWAC,EAAQC,EAAKC,EAAMC,EAAWC,GACjC,GAAMC,IACJC,WAAYN,EAAOO,OAAOC,MAAMC,WAChCC,OACEC,MAAOX,EAAOO,OAAOC,MAAMI,gBAAkBZ,EAAOO,OAAOC,MAAMK,SAAS,GAAGC,MAAQ,GACrFC,SAAUf,EAAOO,OAAOC,MAAMQ,OAC9BC,KAAMjB,EAAOO,OAAOC,MAAMU,cAC1BC,WAAYrB,EAAMsB,cAAcpB,EAAQ,GACxCqB,WAAYvB,EAAMwB,UAAUtB,EAAQ,GACpCuB,WAAYzB,EAAM0B,UAAUxB,EAAQ,IAEtCyB,OACEd,MAAOX,EAAOO,OAAOC,MAAMkB,gBAAkB1B,EAAOO,OAAOC,MAAMK,SAAS,GAAGC,MAAQ,GACrFC,SAAUf,EAAOO,OAAOC,MAAMmB,OAC9BV,KAAMjB,EAAOO,OAAOC,MAAMoB,cAC1BT,WAAYrB,EAAMsB,cAAcpB,EAAQ,GACxCqB,WAAYvB,EAAMwB,UAAUtB,EAAQ,GACpCuB,WAAYzB,EAAM0B,UAAUxB,EAAQ,IAEtC6B,WAAY/B,EAAMgC,cAAc9B,EAAQ,GACxC+B,SAAU,SACVC,QACEC,EAAyC,SAArCjC,EAAOO,OAAOC,MAAMoB,cAA4B,GAAK,GACzDM,EAAyC,QAArClC,EAAOO,OAAOC,MAAMoB,cAA2B,GAAK,GACxDO,EAAyC,OAArCnC,EAAOO,OAAOC,MAAMU,cAA0B,GAAK,GACvDkB,EAAyC,UAArCpC,EAAOO,OAAOC,MAAMU,cAA6B,GAAK,IAI9DmB,GAAEC,OAAOjC,EAASD,EAElB,IAAMmC,IACJC,YAAY,EACZC,UAAU,EACVC,aAAa,EACbC,wBAAyB,oBAGrBC,EAAQC,SAASC,eAAe3C,EAGtC,OAFAN,GAAOkD,KAAKH,EAAO1C,EAAMG,EAASkC,GAE3BK,GAUTI,UA9DK,SA8DKJ,EAAO5C,EAAQC,GA0BvB,MAxBA2C,GAAMK,GAAG,eAAgB,SAACC,GACxB,GAAwB,mBAAbA,IAA4BA,EAAUC,OAAOC,OAAS,EAAG,CAClE,GAAMC,GAASH,EAAUC,OAAOG,IAAI,SAACC,GACnC,GAAqB,mBAAVA,GAAEC,KAAqB,CAChC,GAAMC,GAAcF,EAAEE,WACtB,OAAOC,UAASH,EAAErD,KAAKyD,QAAQF,GAAc,OAE9CG,OAAO,SAACC,GACT,MAAoB,mBAANA,IAGhB7D,GAAO8D,KAAKC,aAAa,EAAGV,GAAQ,MAKxCT,EAAMK,GAAG,kBAAmB,SAACC,GAC3B,GAAwB,mBAAbA,IAA4BA,EAAUC,OAAOC,OAAS,EAAG,CAClE,GAAMC,GAASH,EAAUC,OAAOG,IAAI,SAACC,GACnC,MAAOG,UAASH,EAAEC,KAAM,KAE1BvD,GAAI+D,MAAMhE,EAAOO,OAAOC,MAAMyD,WAAW,GAAGC,YAAYH,aAAaV,GAAQ,GAAM,MAGhF","file":"../../js/chart/bubble_chart.js","sourcesContent":["define([\r\n  '../../vendor/plotly.min',\r\n  '../util/utils'\r\n], (Plotly, utils) => {\r\n  return {\r\n    /**\r\n     * draw - draw chart\r\n     *\r\n     * @param {Object} $scope        angular $scope\r\n     * @param {Object} data          Data for chart\r\n     * @param {String} elementId     HTML element id to embed chart\r\n     * @param {Object} customOptions Custom chart options\r\n     *\r\n     * @return {Object} Chart object\r\n     */\r\n    draw($scope, app, data, elementId, customOptions) {\r\n      const options = {\r\n        showlegend: $scope.layout.props.showLegend,\r\n        xaxis: {\r\n          title: $scope.layout.props.xLabelsAndTitle ? $scope.layout.props.measures[0].label : '',\r\n          showgrid: $scope.layout.props.xScale,\r\n          side: $scope.layout.props.xAxisPosition,\r\n          tickformat: utils.getTickFormat($scope, 0),\r\n          tickprefix: utils.getPrefix($scope, 0),\r\n          ticksuffix: utils.getSuffix($scope, 0),\r\n        },\r\n        yaxis: {\r\n          title: $scope.layout.props.yLabelsAndTitle ? $scope.layout.props.measures[1].label : '',\r\n          showgrid: $scope.layout.props.yScale,\r\n          side: $scope.layout.props.yAxisPosition,\r\n          tickformat: utils.getTickFormat($scope, 1),\r\n          tickprefix: utils.getPrefix($scope, 1),\r\n          ticksuffix: utils.getSuffix($scope, 1),\r\n        },\r\n        separators: utils.getSeparators($scope, 0),\r\n        dragmode: 'select',\r\n        margin: {\r\n          r: ($scope.layout.props.yAxisPosition == 'right') ? 80 : 10,\r\n          l: ($scope.layout.props.yAxisPosition == 'left') ? 80 : 10,\r\n          t: ($scope.layout.props.xAxisPosition == 'top') ? 80 : 10,\r\n          b: ($scope.layout.props.xAxisPosition == 'bottom') ? 80 : 10,\r\n        },\r\n      };\r\n\r\n      $.extend(options, customOptions);\r\n\r\n      const config = {\r\n        scrollZoom: true,\r\n        showLink: false,\r\n        displaylogo: false,\r\n        modeBarButtonsToRemove: ['sendDataToCloud'],\r\n      };\r\n\r\n      const chart = document.getElementById(elementId);\r\n      Plotly.plot(chart, data, options, config);\r\n\r\n      return chart;\r\n    },\r\n\r\n    /**\r\n     * setEvents - set events to the chart\r\n     *\r\n     * @param {type} chart Description\r\n     *\r\n     * @return {type} Description\r\n     */\r\n    setEvents(chart, $scope, app) {\r\n      // Event being triggered when point selections are made\r\n      chart.on('plotly_click', (eventData) => {\r\n        if (typeof eventData != 'undefined' && eventData.points.length > 0) {\r\n          const fields = eventData.points.map((d) => {\r\n            if (typeof d.text != 'undefined') {\r\n              const pointNumber = d.pointNumber;\r\n              return parseInt(d.data.elemNum[pointNumber], 10);\r\n            }\r\n          }).filter((x) => {\r\n            return typeof x !== 'undefined';\r\n          });\r\n          //app.field($scope.layout.props.dimensions[0].expression).selectValues(fields, true, true);\r\n          $scope.self.selectValues(0, fields, true);\r\n        }\r\n      });\r\n\r\n      // Event being triggered when range selections are made\r\n      chart.on('plotly_selected', (eventData) => {\r\n        if (typeof eventData != 'undefined' && eventData.points.length > 0) {\r\n          const fields = eventData.points.map((d) => {\r\n            return parseInt(d.text, 10);\r\n          });\r\n          app.field($scope.layout.props.dimensions[0].expression).selectValues(fields, true, true);\r\n        }\r\n      });\r\n      return null;\r\n    },\r\n  };\r\n});\r\n"]}