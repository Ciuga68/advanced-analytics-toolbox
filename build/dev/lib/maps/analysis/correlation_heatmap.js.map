{"version":3,"sources":["analysis/correlation_heatmap.js"],"names":["define","heatmap","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","console","log","meaLen","measures","length","rowsLabel","label","params","validateMeasure","meaList","dataType","i","mea","param","push","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","displayReturnedDatasetToConsole","correlation","getDefaultPaletteColor","parse","chartData","x","y","z","type","showscale","customOptions","annotations","j","result","xref","yref","text","showarrow","font","color","$","html","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/correlation_heatmap.js","sourcesContent":["define([\r\n  '../chart/heatmap',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (heatmap, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{\r\n        qNullSuppression: true,\r\n        qDef: {\r\n          qFieldDefs: [dimension]\r\n        },\r\n      }];\r\n\r\n      console.log(layout.props)\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = [layout.props.measures[0].label]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N'\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `, q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          //$scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n          $scope.rowsLabel.push(layout.props.measures[i].label);\r\n        }\r\n      }\r\n\r\n      console.log($scope.rowsLabel)\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_correlation_heatmap.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite);res<-cor(data.frame(${meaList}));json<-toJSON(res);json;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const correlation = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const chartData = [{\r\n            x: $scope.rowsLabel,\r\n            y: $scope.rowsLabel,\r\n            z: correlation,\r\n            type: 'heatmap',\r\n            showscale: true,\r\n          }];\r\n\r\n          const customOptions = [];\r\n          customOptions.annotations = [];\r\n\r\n          for (let i = 0; i <  $scope.rowsLabel.length; i++) {\r\n            for (let j = 0; j < $scope.rowsLabel.length; j++) {\r\n              const result = {\r\n                xref: 'x1',\r\n                yref: 'y1',\r\n                x: $scope.rowsLabel[j],\r\n                y: $scope.rowsLabel[i],\r\n                text: correlation[i][j],\r\n                showarrow: false,\r\n                font: {\r\n                  color: 'white',\r\n                },\r\n              };\r\n              customOptions.annotations.push(result);\r\n            }\r\n          }\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          heatmap.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}