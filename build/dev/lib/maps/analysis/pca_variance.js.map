{"version":3,"sources":["analysis/pca_variance.js"],"names":["define","lineChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","meaLen","measures","length","rowsLabel","validateMeasure","params","meaList","dataType","i","mea","param","push","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","displayReturnedDatasetToConsole","palette","getDefaultPaletteColor","importance","parse","proportionOfVariance","cumulativeProportion","dim","chartData","x","y","name","mode","type","fill","line","fillcolor","colors","colorForMain","marker","color","size","datapoints","pointRadius","width","borderWidth","colorForSub","customOptions","showlegend","showLegend","xaxis","title","xLabelsAndTitle","showgrid","xScale","side","xAxisPosition","xAxisType","yaxis","yLabelsAndTitle","yScale","yAxisPosition","tickformat","getTickFormat","tickprefix","getPrefix","ticksuffix","getSuffix","$","html","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/pca_variance.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = [utils.validateMeasure(layout.props.measures[0])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_pca_variance.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite); pca_result<-prcomp(data.frame(${meaList}), center = TRUE, scale = TRUE); json<-toJSON(summary(pca_result)$importance); json;',${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const importance = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const proportionOfVariance = importance[1];\r\n          const cumulativeProportion = importance[2];\r\n\r\n          const dim = [];\r\n          for (let i = 0; i < proportionOfVariance.length; i++) {\r\n            dim.push(`PC${i + 1}`);\r\n          }\r\n\r\n          const chartData = [\r\n            {\r\n              x: dim,\r\n              y: proportionOfVariance,\r\n              name: 'Proportion of variance',\r\n              mode: 'lines+markers',\r\n              type: 'bar',\r\n              fill: layout.props.line,\r\n              fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                width: layout.props.borderWidth,\r\n              },\r\n            },\r\n            {\r\n              x: dim,\r\n              y: cumulativeProportion,\r\n              name: 'Cumulative proportion',\r\n              mode: 'lines+markers',\r\n              fill: layout.props.line,\r\n              fillcolor: (layout.props.colors) ? `rgba(${palette[7]},0.3)` : `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[7]},1)` : `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                width: layout.props.borderWidth,\r\n              },\r\n            },\r\n          ];\r\n\r\n          const customOptions = {\r\n            showlegend: $scope.layout.props.showLegend,\r\n            xaxis: {\r\n              title: $scope.layout.props.xLabelsAndTitle ? 'Principal components' : '',\r\n              showgrid: $scope.layout.props.xScale,\r\n              side: $scope.layout.props.xAxisPosition,\r\n              type: $scope.layout.props.xAxisType,\r\n            },\r\n            yaxis: {\r\n              title: $scope.layout.props.yLabelsAndTitle ? 'Variance' : '',\r\n              showgrid: $scope.layout.props.yScale,\r\n              side: $scope.layout.props.yAxisPosition,\r\n              tickformat: utils.getTickFormat($scope, 0),\r\n              tickprefix: utils.getPrefix($scope, 0),\r\n              ticksuffix: utils.getSuffix($scope, 0),\r\n            },\r\n          };\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}