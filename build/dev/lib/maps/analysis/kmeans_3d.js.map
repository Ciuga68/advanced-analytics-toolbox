{"version":3,"sources":["analysis/kmeans_3d.js"],"names":["define","bubbleChart","utils","$q","createCube","app","$scope","layout","numberOfClusters","props","dimension","validateDimension","dimensions","qDef","qFieldDefs","meaLen","measures","length","params","validateMeasure","meaList","i","mea","param","data","scaleData","measure1","measure2","measure3","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","pageExtensionData","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","palette","getOneHundredColors","bubbleData","text","x","y","z","$","each","key","value","qNum","push","qText","chartData","name","mode","type","marker","color","size","bubbleSize","opacity","line","width","html","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/kmeans_3d.js","sourcesContent":["define([\r\n  '../chart/bubble_3d_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const numberOfClusters = layout.props.numberOfClusters;\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n        }\r\n      }\r\n\r\n      let data = `cbind(${meaList})`;\r\n      if (layout.props.scaleData) {\r\n        data = `scale(cbind(${meaList}))`;\r\n      }\r\n\r\n      const measure1 = utils.validateMeasure(layout.props.measures[0]);\r\n      const measure2 = utils.validateMeasure(layout.props.measures[1]);\r\n      const measure3 = utils.validateMeasure(layout.props.measures[2]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure1,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: measure2,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[1].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: measure3,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[1].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('set.seed(1);kmeans(${data},${numberOfClusters})$cluster', ${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      utils.pageExtensionData($scope, (dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getOneHundredColors();\r\n\r\n          // Create containers for storing bubble data\r\n          const bubbleData = [];\r\n          for (let i = 1; i <= layout.props.numberOfClusters; i++) {\r\n            bubbleData[i] = [];\r\n            bubbleData[i].text = [];\r\n            bubbleData[i].x = [];\r\n            bubbleData[i].y = [];\r\n            bubbleData[i].z = [];\r\n          }\r\n\r\n          $.each(dataPages, (key, value) => {\r\n            bubbleData[value[4].qNum].text.push(value[0].qText);\r\n            bubbleData[value[4].qNum].x.push(value[1].qNum);\r\n            bubbleData[value[4].qNum].y.push(value[2].qNum);\r\n            bubbleData[value[4].qNum].z.push(value[3].qNum);\r\n          });\r\n\r\n          const chartData = [];\r\n          for (let i = 1; i <= layout.props.numberOfClusters; i++) {\r\n            chartData.push({\r\n              x: bubbleData[i].x,\r\n              y: bubbleData[i].y,\r\n              z: bubbleData[i].z,\r\n              text: bubbleData[i].text,\r\n              name: `cluster ${i}`,\r\n              mode: 'markers',\r\n              type: 'scatter3d',\r\n              marker: {\r\n                color: `rgba(${palette[i - 1]},0.7)`,\r\n                size: layout.props.bubbleSize,\r\n                opacity: 0.8,\r\n                line: {\r\n                  color: `rgba(${palette[i - 1]}, 1)`,\r\n                  // color: 'rgba(217, 217, 217, 0.14)',\r\n                  width: 1\r\n                }\r\n              },\r\n            });\r\n          }\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, null);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}