{"version":3,"sources":["analysis/pca.js"],"names":["define","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","meaLen","measures","length","rowsLabel","validateMeasure","params","meaList","dataType","i","mea","param","push","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","result","parse","importance","rotation","header","importanceBody","$","each","key","value","subKey","subValue","rotationBody","footer","importanceHTML","rotationHTML","html","resolve","promise"],"mappings":"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","file":"../../js/analysis/pca.js","sourcesContent":["define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = [utils.validateMeasure(layout.props.measures[0])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEvalExStr('${dataType}','library(jsonlite); pca_result<-prcomp(data.frame(${meaList}), center = TRUE, scale = TRUE); json<-toJSON(list(summary(pca_result)$importance, summary(pca_result)$rotation)); json;',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const importance = result[0];\r\n          const rotation = result[1];\r\n\r\n          // Table header\r\n          let header = '<table border=\"1\"><thead><tr><th></th>';\r\n          for(let i = 0; i < importance[0].length; i++) {\r\n            header += `<th>PC${i + 1}</th>`;\r\n          }\r\n          header += '</tr></thead><tbody>';\r\n\r\n          // Table body for importance\r\n          let importanceBody = '';\r\n          $.each(importance, (key, value) => {\r\n            importanceBody += '<tr><td>'\r\n            importanceBody += (key == 0) ? 'Standard deviation' : (key == 1) ? 'Proportion of Variance' : (key == 2) ? 'Cumulative Proportion' : '';\r\n            importanceBody += '</td>';\r\n            $.each(value, (subKey, subValue) => {\r\n              importanceBody += `<td>${subValue}</td>`;\r\n            });\r\n            importanceBody += '</tr>';\r\n          });\r\n\r\n          // Table body for rotation\r\n          let rotationBody = '';\r\n          $.each(rotation, (key, value) => {\r\n            rotationBody += `<tr><td>${$scope.rowsLabel[key]}`;\r\n            $.each(value, (subKey, subValue) => {\r\n              rotationBody += `<td>${subValue}</td>`;\r\n            });\r\n            rotationBody += '</tr>';\r\n          });\r\n\r\n          // Set table footer and other results\r\n          const footer = '</tbody></table>';\r\n\r\n          const importanceHTML = '<h2>Importance of components:</h2>' + header + importanceBody + footer;\r\n          const rotationHTML = '<h2>Rotation:</h2>' + header + rotationBody + footer;\r\n          const html = importanceHTML + rotationHTML;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}