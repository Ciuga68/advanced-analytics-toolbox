{"version":3,"sources":["analysis/t_test.js"],"names":["define","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","dataTitle","params","analysisTypeId","qDef","qFieldDefs","measure1","validateMeasure","measures","measure2","qLabel","confidenceLevel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","length","displayConnectionError","extId","result","parse","t","df","pValue","lower","upper","estimates","html","$","resolve","promise"],"mappings":"AAAA,YAAAA,SACE,gBACA,SACC,SAACC,EAAOC,GACT,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAKhBC,EAAYN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,GAClEL,GAAOM,UAAY,EACnB,IAAIC,GAAS,GAEPC,EAAiBP,EAAOG,MAAMI,cAEpC,QAAQA,GACN,IAAK,GACHR,EAAOM,UAAY,qBACnBC,EAAS,cACT,MACF,KAAK,GACHP,EAAOM,UAAY,2BACnBC,EAAS,cACT,MACF,KAAK,GACHP,EAAOM,UAAY,iBACnBC,EAAS,YAOb,GAAMF,KAAgBI,MAAQC,YAAaR,MACrCS,EAAWf,EAAMgB,gBAAgBX,EAAOG,MAAMS,SAAS,IACvDC,EAAWlB,EAAMgB,gBAAgBX,EAAOG,MAAMS,SAAS,IACvDA,IAEFJ,MACEM,OAAQ,UACRN,KAAAA,2FAAiGR,EAAOG,MAAMY,gBAAkBT,EAAhI,yJAA+RI,EAA/R,gBAAuTG,EAAvT,kBAIFL,MACEM,OAAQ,IACRN,KAAM,MAIRA,MACEM,OAAQ,IACRN,KAAM,MAIRA,MACEM,OAAQ,IACRN,KAAM,MAIRA,MACEM,OAAQ,IACRN,KAAM,KAmBZ,OAdAT,GAAOiB,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUlB,KAGvBc,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUV,MAExB,GAEHb,EAAOwB,cAAe,EACf,MASTC,UAlGK,SAkGKzB,GACR,GAAM0B,GAAQ7B,EAAG6B,QACXzB,EAASD,EAAOC,OAGhB0B,GADY/B,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,MAEhEuB,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,IAmDX,OAhDA/B,GAAOiB,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GACvBlC,EAAOC,OAAOkC,WAAWC,YAG7C,IAAgD,IAA5CF,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCL,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAC9E1C,EAAM4C,uBAAuBxC,EAAOyC,WAC/B,CACL,GAAMC,GAASpB,KAAKqB,MAAMT,EAAU,GAAGG,QAAQ,GAAG,GAAGC,OAE/CM,EAAIF,EAAO,GAAG,GACdG,EAAKH,EAAO,GAAG,GACfI,EAASJ,EAAO,GAAG,GACnBK,EAAQL,EAAO,GAAG,GAClBM,EAAQN,EAAO,GAAG,GAClBO,EAAYP,EAAO,GAErBQ,EAAAA,qBACIlD,EAAOM,UADX,kPASsBsC,EATtB,kDAUuBC,EAVvB,uDAW4BC,EAX5B,uCAY2C,IAA/B7C,EAAOG,MAAMY,gBAZzB,iCAY+E+B,EAZ/E,KAYyFC,EAZzF,yBAcExC,EAAiBP,EAAOG,MAAMI,cAEb,KAAnBA,GAA2C,IAAnBA,EAC1B0C,GAAAA,+CAAuDD,EAAU,GAAjE,gBAAmFA,EAAU,GAA7F,aAC4B,IAAnBzC,IACT0C,GAAAA,6DAAqED,EAAU,GAA/E,cAKFC,GAAAA,8GAIAC,EAAAA,gCAAkCnD,EAAOyC,OAASS,KAAKA,GAEzD,MAAOxB,GAAM0B,YAER1B,EAAM2B","file":"../../js/analysis/t_test.js","sourcesContent":["define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      $scope.dataTitle = '';\r\n      let params = '';\r\n\r\n      const analysisTypeId = layout.props.analysisTypeId;\r\n\r\n      switch (analysisTypeId) {\r\n        case 3:\r\n          $scope.dataTitle = 'Two sample t-test:';\r\n          params = ',var.equal=T';\r\n          break;\r\n        case 4:\r\n          $scope.dataTitle = 'Welch two sample t-test:';\r\n          params = ',var.equal=F';\r\n          break;\r\n        case 5:\r\n          $scope.dataTitle = 'Paired t-test:';\r\n          params = ',paired=T';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n      const measure1 = utils.validateMeasure(layout.props.measures[0]);\r\n      const measure2 = utils.validateMeasure(layout.props.measures[1]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qLabel: 'Results',\r\n            qDef: `R.ScriptEvalExStr('NN','library(jsonlite); res<-t.test(q$SampleA, q$SampleB, conf.level=${layout.props.confidenceLevel}${params}); json<-toJSON(list(as.double(res$statistic),as.double(res$parameter),res$p.value,res$conf.int[1],res$conf.int[2],as.double(res$estimate))); json;', ${measure1} as SampleA, ${measure2} as SampleB)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const t = result[0][0];\r\n          const df = result[1][0];\r\n          const pValue = result[2][0];\r\n          const lower = result[3][0];\r\n          const upper = result[4][0];\r\n          const estimates = result[5];\r\n\r\n          let html = `\r\n            <h2>${$scope.dataTitle}</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Item</th><th>Value</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr><td>t</td><td>${t}</td></tr>\r\n                <tr><td>df</td><td>${df}</td></tr>\r\n                <tr><td>p-value</td><td>${pValue}</td></tr>\r\n                <tr><td>${layout.props.confidenceLevel * 100}% confidence interval</td><td>${lower}, ${upper}</td></tr>\r\n          `;\r\n          const analysisTypeId = layout.props.analysisTypeId;\r\n\r\n          if (analysisTypeId === 3 || analysisTypeId === 4) {\r\n            html += `<tr><td>Sample estimates</td><td>mean of x: ${estimates[0]}, mean of y: ${estimates[1]}</td></tr>`;\r\n          } else if (analysisTypeId === 5) {\r\n            html += `<tr><td>Sample estimates</td><td>mean of the differences: ${estimates[0]}</td></tr>`;\r\n          } else {\r\n            // do nothing\r\n          }\r\n\r\n          html += `</tbody></table>\r\n          <div>* alternative hypothesis: true difference in means is not equal to 0</div>`;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}