{"version":3,"sources":["analysis/simple_linear_line.js"],"names":["define","lineChart","datatables","utils","$q","d3","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","qSortCriterias","qSortByExpression","dimSort","dimSortByExpression","dimSortByExpressionAsc","qSortByNumeric","dimSortByNum","dimSortByNumAsc","qSortByAscii","dimSortByAlph","dimSortByAlphAsc","qExpression","qv","dimSortByExpressionString","measure","validateMeasure","measures","qLabel","interval","confidenceLevel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","palette","getDefaultPaletteColor","displayTable","elemNum","dim1","mea1","mea2","mea3","mea4","$","each","qMatrix","key","value","push","qElemNumber","qText","qNum","chartData","x","y","name","mode","fill","line","fillcolor","colors","colorForMain","marker","color","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","html","chart","draw","setEvents","locale","getLocale","numberFormat","getNumberFormat","dataset","format","replace","label","table","resolve","promise"],"mappings":"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","file":"../../js/analysis/simple_linear_line.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            qSortCriterias: [{\r\n              qSortByExpression: layout.props.dimSort || !layout.props.dimSortByExpression ? 0 : layout.props.dimSortByExpressionAsc,\r\n              qSortByNumeric: (layout.props.dimSort) ? 1 : (!layout.props.dimSortByNum) ? 0 : layout.props.dimSortByNumAsc,\r\n              qSortByAscii: layout.props.dimSort || !layout.props.dimSortByAlph ? 0 : layout.props.dimSortByAlphAsc,\r\n              qExpression: {\r\n                qv: layout.props.dimSortByExpressionString,\r\n              },\r\n            }],\r\n          },\r\n        },\r\n      ];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Fit',\r\n            qDef: `R.ScriptEval('lm_result <- lm(q$Measure~q$Dimension);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,1]',${dimension} as Dimension, ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Lower',\r\n            qDef: `R.ScriptEval('lm_result <- lm(q$Measure~q$Dimension);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,2]',${dimension} as Dimension, ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Upper',\r\n            qDef: `R.ScriptEval('lm_result <- lm(q$Measure~q$Dimension);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,3]',${dimension} as Dimension, ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = [];\r\n            const mea2 = [];\r\n            const mea3 = [];\r\n            const mea4 = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n              mea2.push(value[2].qNum);\r\n              mea3.push(value[3].qNum);\r\n              mea4.push(value[4].qNum);\r\n            });\r\n\r\n            const chartData = [\r\n              {\r\n                x: dim1,\r\n                y: mea1,\r\n                elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill:  layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mea2,\r\n                name: 'Fit',\r\n                line: {\r\n                  color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mea3,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mea4,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            ];\r\n\r\n            // Display ARIMA parameters\r\n            $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            const dataset = [];\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(value[2].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(value[3].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(value[4].qNum).replace(/G/, 'B'),\r\n              ]);\r\n            });\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}