{"version":3,"sources":["analysis/simple_linear_line.js"],"names":["define","lineChart","datatables","utils","$q","d3","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qNullSuppression","qDef","qFieldDefs","qSortCriterias","qSortByExpression","dimSort","dimSortByExpression","dimSortByExpressionAsc","qSortByNumeric","dimSortByNum","dimSortByNumAsc","qSortByAscii","dimSortByAlph","dimSortByAlphAsc","qExpression","qv","dimSortByExpressionString","measure","validateMeasure","measures","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","interval","confidenceLevel","defMea2","defMea3","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","displayReturnedDatasetToConsole","palette","getDefaultPaletteColor","displayTable","elemNum","dim1","mea1","mea2","mea3","mea4","$","each","qMatrix","key","value","push","qElemNumber","qText","qNum","chartData","x","y","name","mode","fill","line","fillcolor","colors","colorForMain","marker","color","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","html","chart","draw","setEvents","locale","getLocale","numberFormat","getNumberFormat","dataset","format","replace","label","table","resolve","promise"],"mappings":"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","file":"../../js/analysis/simple_linear_line.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qNullSuppression: true,\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            qSortCriterias: [{\r\n              qSortByExpression: layout.props.dimSort || !layout.props.dimSortByExpression ? 0 : layout.props.dimSortByExpressionAsc,\r\n              qSortByNumeric: (layout.props.dimSort) ? 1 : (!layout.props.dimSortByNum) ? 0 : layout.props.dimSortByNumAsc,\r\n              qSortByAscii: layout.props.dimSort || !layout.props.dimSortByAlph ? 0 : layout.props.dimSortByAlphAsc,\r\n              qExpression: {\r\n                qv: layout.props.dimSortByExpressionString,\r\n              },\r\n            }],\r\n          },\r\n        },\r\n      ];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_simple_linear_line.rda');\r\n\r\n      const defMea1 = `R.ScriptEval('${saveRDataset} lm_result <- lm(q$Measure~q$Dimension);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,1]',${dimension} as Dimension, ${measure} as Measure)`;\r\n      const defMea2 = `R.ScriptEval('lm_result <- lm(q$Measure~q$Dimension);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,2]',${dimension} as Dimension, ${measure} as Measure)`;\r\n      const defMea3 = `R.ScriptEval('lm_result <- lm(q$Measure~q$Dimension);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,3]',${dimension} as Dimension, ${measure} as Measure)`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1, defMea2, defMea3]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Fit',\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Lower',\r\n            qDef: defMea2,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Upper',\r\n            qDef: defMea3,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = [];\r\n            const mea2 = [];\r\n            const mea3 = [];\r\n            const mea4 = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n              mea2.push(value[2].qNum);\r\n              mea3.push(value[3].qNum);\r\n              mea4.push(value[4].qNum);\r\n            });\r\n\r\n            const chartData = [\r\n              {\r\n                x: dim1,\r\n                y: mea1,\r\n                elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill:  layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mea2,\r\n                name: 'Fit',\r\n                line: {\r\n                  color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mea3,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: dim1,\r\n                y: mea4,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            ];\r\n\r\n            // Display ARIMA parameters\r\n            $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            const dataset = [];\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(value[2].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(value[3].qNum).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(value[4].qNum).replace(/G/, 'B'),\r\n              ]);\r\n            });\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}