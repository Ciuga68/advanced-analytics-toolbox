{"version":3,"sources":["analysis/kmeans_optimize.js"],"names":["define","lineChart","utils","$q","createCube","app","$scope","layout","dimension","props","numberOfClusters","validateDimension","dimensions","qDef","qFieldDefs","meaLen","measures","length","params","validateMeasure","meaList","dataType","i","mea","param","data","scaleData","measure","optimizationMethod","clusterMax","bootstrap","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","result","parse","palette","getOneHundredColors","x","gap","seSim","$","each","key","value","push","chartData","y","name","error_y","type","symmetric","array","arrayminus","thickness","borderWidth","color","colors","colorForMain","mode","marker","size","pointRadius","html","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/kmeans_optimize.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const numberOfClusters = layout.props.numberOfClusters;\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n        }\r\n      }\r\n\r\n      let data = `cbind(${meaList})`;\r\n      if (layout.props.scaleData) {\r\n        data = `scale(cbind(${meaList}))`;\r\n      }\r\n\r\n      let measure = '';\r\n      if (typeof layout.props.optimizationMethod == 'undefined' || layout.props.optimizationMethod == 'gap') {\r\n        measure = `R.ScriptEvalExStr('${dataType}','library(cluster); library(jsonlite); set.seed(1); gap_kmeans<-clusGap(${data}, FUNcluster=kmeans, K.max=${layout.props.clusterMax}, B=${layout.props.bootstrap}); json<-toJSON(gap_kmeans$Tab); json;', ${params})`\r\n      }\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const palette = utils.getOneHundredColors();\r\n\r\n          const x = [];\r\n          const gap = [];\r\n          const seSim = [];\r\n\r\n          $.each(result, (key, value) => {\r\n            x.push(key + 1);\r\n            gap.push(value[2]);\r\n            seSim.push(value[3]);\r\n          })\r\n\r\n          const chartData = [\r\n            {\r\n              x: x,\r\n              y: gap,\r\n              name: 'Gap statistic',\r\n              error_y: {\r\n                type: 'data',\r\n                symmetric: false,\r\n                array: seSim,\r\n                arrayminus: seSim,\r\n                thickness: layout.props.borderWidth,\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n              },\r\n              type: 'scatter',\r\n              mode: 'markers+lines',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: layout.props.pointRadius,\r\n              },\r\n            },\r\n          ];\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}