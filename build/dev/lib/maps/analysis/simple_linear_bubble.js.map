{"version":3,"sources":["analysis/simple_linear_bubble.js"],"names":["define","bubbleChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","measure1","validateMeasure","measures","measure2","qLabel","interval","confidenceLevel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","palette","getDefaultPaletteColor","elemNum","dim1","mea1","mea2","mea3","mea4","mea5","datasets","qMatrix","map","value","qElemNumber","qText","qNum","sort","a","b","parseFloat","$","each","key","push","chartData","x","y","text","name","mode","type","marker","color","colors","colorForMain","size","bubbleSize","line","colorForSub","fill","fillcolor","html","chart","draw","setEvents","resolve","promise"],"mappings":"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","file":"../../js/analysis/simple_linear_bubble.js","sourcesContent":["define([\r\n  '../chart/bubble_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const measure1 = utils.validateMeasure(layout.props.measures[0]);\r\n      const measure2 = utils.validateMeasure(layout.props.measures[1]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure1,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[0].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: measure2,\r\n            // qSortBy: layout.qHyperCubeDef.qMeasures[1].qSortBy, // Sort definition\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Fit',\r\n            qDef: `R.ScriptEval('lm_result <- lm(q$Measure2~q$Measure1);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,1]',${measure1} as Measure1, ${measure2} as Measure2)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Lower',\r\n            qDef: `R.ScriptEval('lm_result <- lm(q$Measure2~q$Measure1);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,2]',${measure1} as Measure1, ${measure2} as Measure2)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: 'Upper',\r\n            qDef: `R.ScriptEval('lm_result <- lm(q$Measure2~q$Measure1);predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,3]',${measure1} as Measure1, ${measure2} as Measure2)`,\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n          && isNaN(measureInfo[4].qMin) && isNaN(measureInfo[4].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const elemNum = [];\r\n          const dim1 = [];\r\n          const mea1 = [];\r\n          const mea2 = [];\r\n          const mea3 = [];\r\n          const mea4 = [];\r\n          const mea5 = [];\r\n\r\n          const datasets = dataPages[0].qMatrix.map((value) => {\r\n            return {\r\n              elemNum: value[0].qElemNumber,\r\n              dim1: value[0].qText,\r\n              mea1: value[1].qNum,\r\n              mea2: value[2].qNum,\r\n              mea3: value[3].qNum,\r\n              mea4: value[4].qNum,\r\n              mea5: value[5].qNum,\r\n            };\r\n          });\r\n\r\n          // Sort datasets with mea1 (values for xaxis on bubble chart)\r\n          // When datasets is not sorted, the color fillings between upper and lower\r\n          // line is not done properly.\r\n          datasets.sort((a, b) => {\r\n            return parseFloat(a.mea1) - parseFloat(b.mea1);\r\n          });\r\n\r\n          $.each(datasets, (key, value) => {\r\n            elemNum.push(value.elemNum);\r\n            dim1.push(value.dim1);\r\n            mea1.push(value.mea1);\r\n            mea2.push(value.mea2);\r\n            mea3.push(value.mea3);\r\n            mea4.push(value.mea4);\r\n            mea5.push(value.mea5);\r\n          });\r\n\r\n          const chartData = [\r\n            {\r\n              x: mea1,\r\n              y: mea2,\r\n              elemNum,\r\n              text: dim1,\r\n              name: dimension,\r\n              mode: 'markers',\r\n              type: 'scatter',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},0.8)` : `rgba(${palette[layout.props.colorForMain]},0.8)`,\r\n                size: layout.props.bubbleSize,\r\n              },\r\n            },\r\n            {\r\n              x: mea1,\r\n              y: mea3,\r\n              name: 'Fit',\r\n              line: {\r\n                color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n              },\r\n            },\r\n            {\r\n              x: mea1,\r\n              y: mea4,\r\n              name: 'Lower',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n            {\r\n              x: mea1,\r\n              y: mea5,\r\n              name: 'Upper',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n          ];\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, null);\r\n          bubbleChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}