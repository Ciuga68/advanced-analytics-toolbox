{"version":3,"sources":["analysis/kmeans_means.js"],"names":["define","bubbleChart","utils","$q","createCube","app","$scope","layout","numberOfClusters","props","dimension","validateDimension","dimensions","qDef","qFieldDefs","meaLen","measures","length","params","validateMeasure","meaList","dataType","i","mea","param","data","scaleData","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qMatrix","qText","displayConnectionError","extId","result","parse","getOneHundredColors","push","label","chartData","customOptions","xaxis","title","xLabelsAndTitle","showgrid","xScale","side","xAxisPosition","yaxis","yLabelsAndTitle","yScale","yAxisPosition","tickformat","getTickFormat","tickprefix","getPrefix","ticksuffix","getSuffix","barmode","dividedBy","$","each","key","value","x","y","name","type","clusterList","variableData","subkey","subvalue","html","draw","css","on","resolve","promise"],"mappings":"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","file":"../../js/analysis/kmeans_means.js","sourcesContent":["define([\r\n  '../chart/bubble_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const numberOfClusters = layout.props.numberOfClusters;\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            // qSortCriterias: layout.qHyperCubeDef.qDimensions[0].qDef.qSortCriterias\r\n          },\r\n        },\r\n      ];\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n        }\r\n      }\r\n\r\n      let data = `cbind(${meaList})`;\r\n      if (layout.props.scaleData) {\r\n        data = `scale(cbind(${meaList}))`;\r\n      }\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEvalExStr('${dataType}', 'library(jsonlite); set.seed(1); json<-toJSON(kmeans(${data},${numberOfClusters})$centers); json;', ${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const palette = utils.getOneHundredColors();\r\n\r\n          const meaLen = layout.props.measures.length;\r\n          const meaList = [];\r\n\r\n          for (let i = 0; i < meaLen; i++) {\r\n            meaList.push(layout.props.measures[i].label);\r\n          }\r\n\r\n          const chartData = [];\r\n          const customOptions = {\r\n            xaxis: {\r\n              title: $scope.layout.props.xLabelsAndTitle ? 'Variables' : '',\r\n              showgrid: $scope.layout.props.xScale,\r\n              side: $scope.layout.props.xAxisPosition,\r\n            },\r\n            yaxis: {\r\n              title: $scope.layout.props.yLabelsAndTitle ? 'Y' : '',\r\n              showgrid: $scope.layout.props.yScale,\r\n              side: $scope.layout.props.yAxisPosition,\r\n              tickformat: utils.getTickFormat($scope, 0),\r\n              tickprefix: utils.getPrefix($scope, 0),\r\n              ticksuffix: utils.getSuffix($scope, 0),\r\n            },\r\n            barmode: 'group',\r\n          };\r\n\r\n          // Divide by variables\r\n          if (typeof $scope.layout.props.dividedBy == 'undefined' || $scope.layout.props.dividedBy ==='variables') {\r\n            $.each(result, (key, value) => {\r\n              chartData.push({\r\n                x: meaList,\r\n                y: value,\r\n                name: `cluster ${key}`,\r\n                type: 'bar',\r\n              });\r\n            });\r\n\r\n          // Divide by clusters\r\n          } else {\r\n            // Create list of clusters\r\n            const clusterList = [];\r\n            for (let i = 1; i <= layout.props.numberOfClusters; i++) {\r\n              clusterList.push(`cluster ${i}`);\r\n            }\r\n\r\n            // Create containers for storing data\r\n            const variableData = [];\r\n            for (let i = 0; i < meaLen; i++) {\r\n              variableData[i] = [];\r\n            }\r\n\r\n            $.each(result, (key, value) => {\r\n              $.each(value, (subkey, subvalue) => {\r\n                variableData[subkey].push(subvalue)\r\n              });\r\n            });\r\n\r\n            for (let i = 0; i < meaLen; i++) {\r\n              chartData.push({\r\n                x: clusterList,\r\n                y: variableData[i],\r\n                name: meaList[i],\r\n                type: 'bar',\r\n              });\r\n            }\r\n\r\n            customOptions.xaxis.title = $scope.layout.props.xLabelsAndTitle ? 'Clusters' : '';\r\n          }\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n          bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n\r\n          $(`#aat-chart-${$scope.extId} .legend .traces .legendtoggle`).css('display', 'none');\r\n          $(`#aat-chart-${$scope.extId} g.traces`).on('click', (data) => {\r\n            // do nothing\r\n          });\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}