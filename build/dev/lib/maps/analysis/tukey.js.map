{"version":3,"sources":["analysis/tukey.js"],"names":["define","chartDrawer","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","params","validateMeasure","measures","meaList","dataTitle","dataType","displayDebugModeMessage","debugMode","saveRDataset","getDebugSaveDatasetScript","defMea1","confidenceLevel","displayRScriptsToConsole","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","length","displayConnectionError","extId","displayReturnedDatasetToConsole","result","parse","rownames","data","html","i","$","resolve","promise"],"mappings":"AAAA,YAAAA,SACE,sBACA,gBACA,SACC,SAACC,EAAaC,EAAOC,GACtB,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAMhBC,EAAYN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAC5DA,IAAgBC,MAAQC,YAAaL,MAGrCM,EAAYZ,EAAMa,gBAAgBR,EAAOG,MAAMM,SAAS,IAAxD,aAAwEd,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAAxH,WACAM,EAAU,iBAChBX,GAAOY,UAAYhB,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,GAGnE,IAAMQ,GAAW,IAGjBjB,GAAMkB,wBAAwBb,EAAOG,MAAMW,UAC3C,IAAMC,GAAepB,EAAMqB,0BAA0BhB,EAAOG,MAAMW,UAAW,mBAEvEG,EAAAA,sBAAgCL,EAAhC,MAA8CG,EAA9C,yCAAmGL,EAAnG,iBAA2HV,EAAOG,MAAMe,gBAAxI,gEAAuNX,EAAvN,GAGNZ,GAAMwB,yBAAyBnB,EAAOG,MAAMW,WAAYG,GAExD,IAAMR,KAEFJ,MACEe,OAAQ,UACRf,KAAMY,KAIRZ,MACEe,OAAQ,IACRf,KAAM,MAIRA,MACEe,OAAQ,IACRf,KAAM,MAIRA,MACEe,OAAQ,IACRf,KAAM,MAIRA,MACEe,OAAQ,IACRf,KAAM,KAmBZ,OAdAN,GAAOsB,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUvB,KAGvBmB,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUlB,MAExB,GAEHV,EAAO6B,cAAe,EACf,MASTC,UA5FK,SA4FK9B,GACR,GAAM+B,GAAQlC,EAAGkC,QACX9B,EAASD,EAAOC,OAGhB+B,GADYpC,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,MAEhE4B,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,IA8CX,OA3CApC,GAAOsB,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GACvBvC,EAAOC,OAAOuC,WAAWC,YAG7C,IAAgD,IAA5CF,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCL,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAC9E/C,EAAMiD,uBAAuB7C,EAAO8C,WAC/B,CAELlD,EAAMmD,gCAAgC9C,EAAOG,MAAMW,UAAWwB,EAAU,GAmBxE,KAAK,GAjBCS,GAASrB,KAAKsB,MAAMV,EAAU,GAAGG,QAAQ,GAAG,GAAGC,OAE/CO,EAAWF,EAAO,GAClBG,EAAOH,EAAO,GAEhBI,EAAAA,gFAEoC,IAA/BnD,EAAOG,MAAMe,gBAFlB,yRAYKkC,EAAI,EAAGA,EAAIH,EAASN,OAAQS,IACnCD,GAAAA,2BACYF,EAASG,GADrB,YACmCF,EAAKE,GAAG,GAD3C,YACyDF,EAAKE,GAAG,GADjE,YAC+EF,EAAKE,GAAG,GADvF,YACqGF,EAAKE,GAAG,GAD7G,0BAKFD,IAAAA,6DAMAE,EAAAA,gCAAkCtD,EAAO8C,OAASM,KAAKA,GAEzD,MAAOrB,GAAMwB,YAERxB,EAAMyB","file":"../../js/analysis/tukey.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (chartDrawer, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n      // Set definitions for dimensions and measures\r\n      const params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateDimension(layout.props.dimensions[1])} as dim1`;\r\n      const meaList = 'q$mea0 ~ q$dim1';\r\n      $scope.dataTitle = utils.validateDimension(layout.props.dimensions[1]);\r\n\r\n      // Set first and seasonal differences to acf and pacf\r\n      const dataType = 'NS';\r\n\r\n      // Debug mode - set R dataset name to store the q data.\r\n      utils.displayDebugModeMessage(layout.props.debugMode);\r\n      const saveRDataset = utils.getDebugSaveDatasetScript(layout.props.debugMode, 'debug_tukey.rda');\r\n\r\n      const defMea1 = `R.ScriptEvalExStr('${dataType}','${saveRDataset} library(jsonlite); res<-TukeyHSD(aov(${meaList}), conf.level=${layout.props.confidenceLevel}); json<-toJSON(list(rownames(res[[1]]), res[[1]])); json;', ${params})`;\r\n\r\n      // Debug mode - display R Scripts to console\r\n      utils.displayRScriptsToConsole(layout.props.debugMode, [defMea1]);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qLabel: 'Results',\r\n            qDef: defMea1,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[1]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          // Debug mode - display returned dataset to console\r\n          utils.displayReturnedDatasetToConsole(layout.props.debugMode, dataPages[0]);\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const rownames = result[0];\r\n          const data = result[1];\r\n\r\n          let html = `\r\n            <h2>Tukey multiple comparisons of means</h2>\r\n            <div>${layout.props.confidenceLevel * 100}% family-wise confidence level</div>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  </th><th><th>diff</th><th>lwr</th><th>upr</th><th>p adj</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n         `;\r\n\r\n          for (let i = 0; i < rownames.length; i++) {\r\n            html += `\r\n              <tr><td>${rownames[i]}</td><td>${data[i][0]}</td><td>${data[i][1]}</td><td>${data[i][2]}</td><td>${data[i][3]}</td></tr>\r\n            `;\r\n          }\r\n\r\n          html += `\r\n              </tbody>\r\n            </table>\r\n          `;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}