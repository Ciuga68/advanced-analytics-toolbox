{"version":3,"sources":["analysis/regression_analysis_line_chart.js"],"names":["define","lineChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","qSortCriterias","qSortByExpression","dimSort","dimSortByExpression","dimSortByExpressionAsc","qSortByNumeric","dimSortByNum","dimSortByNumAsc","qSortByAscii","dimSortByAlph","dimSortByAlphAsc","qExpression","qv","dimSortByExpressionString","meaLen","measures","length","rowsLabel","validateMeasure","params","meaList","i","mea","param","push","measure","interval","confidenceLevel","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","palette","getDefaultPaletteColor","elemNum","dim1","mea1","mea2","mea3","mea4","$","each","qMatrix","key","value","qElemNumber","qText","qNum","chartData","x","y","name","mode","fill","line","fillcolor","colors","colorForMain","marker","color","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","html","chart","draw","setEvents","resolve","promise"],"mappings":"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","file":"../../js/analysis/regression_analysis_line_chart.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension],\r\n            qSortCriterias: [{\r\n              qSortByExpression: layout.props.dimSort || !layout.props.dimSortByExpression ? 0 : layout.props.dimSortByExpressionAsc,\r\n              qSortByNumeric: (layout.props.dimSort) ? 1 : (!layout.props.dimSortByNum) ? 0 : layout.props.dimSortByNumAsc,\r\n              qSortByAscii: layout.props.dimSort || !layout.props.dimSortByAlph ? 0 : layout.props.dimSortByAlphAsc,\r\n              qExpression: {\r\n                qv: layout.props.dimSortByExpressionString,\r\n              },\r\n            }],\r\n          },\r\n        },\r\n      ];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = ['(Intercept)', utils.validateMeasure(layout.props.measures[1])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'q$mea0 ~ q$mea1';\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + q$mea${i}`;\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,1]',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,2]',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('lm_result <- lm(${meaList});predict(lm_result, interval=\"${layout.props.interval}\", level=${layout.props.confidenceLevel})[,3]',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const elemNum = [];\r\n          const dim1 = []; // Dimension\r\n          const mea1 = [];\r\n          const mea2 = [];\r\n          const mea3 = [];\r\n          const mea4 = [];\r\n\r\n          $.each(dataPages[0].qMatrix, (key, value) => {\r\n            elemNum.push(value[0].qElemNumber);\r\n            dim1.push(value[0].qText);\r\n            mea1.push(value[1].qNum);\r\n            mea2.push(value[2].qNum);\r\n            mea3.push(value[3].qNum);\r\n            mea4.push(value[4].qNum);\r\n          });\r\n\r\n          const chartData = [\r\n            {\r\n              x: dim1,\r\n              y: mea1,\r\n              elemNum,\r\n              name: 'Observed',\r\n              mode: 'lines+markers',\r\n              fill:  layout.props.line,\r\n              fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                width: layout.props.borderWidth,\r\n              },\r\n            },\r\n            {\r\n              x: dim1,\r\n              y: mea2,\r\n              name: 'Fit',\r\n              line: {\r\n                color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n              },\r\n            },\r\n            {\r\n              x: dim1,\r\n              y: mea3,\r\n              name: 'Lower',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n            {\r\n              x: dim1,\r\n              y: mea4,\r\n              name: 'Upper',\r\n              fill: 'tonexty',\r\n              fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n              type: 'scatter',\r\n              mode: 'none',\r\n            },\r\n          ];\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n          lineChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}