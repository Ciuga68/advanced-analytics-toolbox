{"version":3,"sources":["analysis/timeseries_forecast.js"],"names":["define","lineChart","datatables","utils","$q","d3","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","measure","validateMeasure","measures","expression","autoARIMA","AROrder","DegreeOfDifferencing","MAOrder","SeasonalAROrder","SeasonalDegreeOfDifferencing","SeasonalMAOrder","frequency","confidenceLevel","forecastingPeriods","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qMatrix","qText","length","displayConnectionError","extId","palette","getDefaultPaletteColor","result","parse","mean","upper","lower","arimaorder","displayTable","datasets","dataLength","elemNum","dim1","mea1","$","each","key","value","push","qElemNumber","qNum","mea2","Array","mea3","mea4","i","arima","chartData","x","y","name","mode","fill","line","fillcolor","colors","colorForMain","marker","color","size","datapoints","pointRadius","width","borderWidth","colorForSub","type","customOptions","xaxis","title","xLabelsAndTitle","label","showgrid","xScale","side","xAxisPosition","displayARIMAParams","html","chart","draw","setEvents","locale","getLocale","numberFormat","getNumberFormat","dataset","format","replace","table","resolve","promise"],"mappings":"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","file":"../../js/analysis/timeseries_forecast.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../chart/datatables',\r\n  '../util/utils',\r\n  'ng!$q',\r\n  '../../vendor/d3-format.min',\r\n], (lineChart, datatables, utils, $q, d3) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n      let expression = '';\r\n      if (layout.props.autoARIMA) {\r\n        expression = `fit<-auto.arima(data);`;\r\n      } else {\r\n        expression = `fit<-arima(data, order=c(${layout.props.AROrder},${layout.props.DegreeOfDifferencing},${layout.props.MAOrder})\r\n                      ,seasonal=list(order=c(${layout.props.SeasonalAROrder},${layout.props.SeasonalDegreeOfDifferencing},${layout.props.SeasonalMAOrder}), period=${layout.props.frequency}));`;\r\n      }\r\n\r\n      let frequency = '';\r\n      if (layout.props.frequency > 0) {\r\n        frequency = `,frequency=${layout.props.frequency}`;\r\n      }\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEvalExStr('N', 'library(jsonlite);library(dplyr);library(forecast);data<-ts(na.omit(q$Measure) ${frequency});${expression}\r\n            res<-forecast(fit, level=${layout.props.confidenceLevel}, h=${layout.props.forecastingPeriods});\r\n            json<-toJSON(list(as.double(res$mean),as.double(res$upper),as.double(res$lower),arimaorder(fit))); json;', ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][2].qText);\r\n          const mean = result[0];\r\n          const upper = result[1];\r\n          const lower = result[2];\r\n          const arimaorder = result[3];\r\n\r\n          // Chart mode\r\n          if (typeof $scope.layout.props.displayTable == 'undefined' || $scope.layout.props.displayTable == false) {\r\n\r\n            const datasets = {};\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const elemNum = [];\r\n            const dim1 = []; // Dimension\r\n            const mea1 = []; // Actual values\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim1.push(value[0].qText);\r\n              mea1.push(value[1].qNum);\r\n            });\r\n            datasets.elemNum = elemNum;\r\n            datasets.dim1 = dim1;\r\n            datasets.mea1 = mea1;\r\n\r\n            // Store forecast values to datasets\r\n            const mea2 = new Array(dataLength); // Forecast (mean)\r\n            const mea3 = new Array(dataLength); // Forecast (upper)\r\n            const mea4 = new Array(dataLength); // Forecast (lower)\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              datasets.dim1.push(`+${i + 1}`); // Forecast period is displayed as +1, +2, +3...\r\n              mea2.push(mean[i]);\r\n              mea3.push(upper[i]);\r\n              mea4.push(lower[i]);\r\n            }\r\n            datasets.mea2 = mea2;\r\n            datasets.mea3 = mea3;\r\n            datasets.mea4 = mea4;\r\n\r\n            // Calculate ARIMA order\r\n            let arima = '';\r\n            if (0 < arimaorder.length && arimaorder.length <= 3) {\r\n              arima = `(${arimaorder[0]},${arimaorder[1]},${arimaorder[2]})`;\r\n            } else if (arimaorder.length <= 6) {\r\n              arima = `(${arimaorder[0]},${arimaorder[1]},${arimaorder[2]})(${arimaorder[3]},${arimaorder[4]},${arimaorder[5]})`;\r\n            } else if (6 < arimaorder.length) {\r\n              arima = `(${arimaorder[0]},${arimaorder[1]},${arimaorder[2]})(${arimaorder[3]},${arimaorder[4]},${arimaorder[5]})[${arimaorder[6]}]`;\r\n            } else {\r\n              // do nothing\r\n            }\r\n\r\n            const chartData = [\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea1,\r\n                elemNum: datasets.elemNum,\r\n                name: 'Observed',\r\n                mode: 'lines+markers',\r\n                fill:  layout.props.line,\r\n                fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea2,\r\n                name: 'Fit',\r\n                mode: 'lines+markers',\r\n                marker: {\r\n                  color: (layout.props.colors) ? `rgba(${palette[7]},1)` : `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                  size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n                },\r\n                line: {\r\n                  width: layout.props.borderWidth,\r\n                  //color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea3,\r\n                name: 'Upper',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n              {\r\n                x: datasets.dim1,\r\n                y: datasets.mea4,\r\n                name: 'Lower',\r\n                fill: 'tonexty',\r\n                fillcolor: `rgba(${palette[layout.props.colorForSub]},0.3)`,\r\n                type: 'scatter',\r\n                mode: 'none',\r\n              },\r\n            ];\r\n\r\n            const customOptions = {\r\n              xaxis: {\r\n                type: 'category',\r\n                title: $scope.layout.props.xLabelsAndTitle ? $scope.layout.props.dimensions[0].label : '',\r\n                showgrid: $scope.layout.props.xScale,\r\n                side: $scope.layout.props.xAxisPosition,\r\n              },\r\n            };\r\n\r\n            if (layout.props.displayARIMAParams) {\r\n              // Display ARIMA parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`)\r\n              .html(`\r\n                <div style=\"width:100%;height:5%;text-align:right;\">ARIMA${arima}</div>\r\n                <div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:95%;\"></div>\r\n              `);\r\n            } else {\r\n              // Hide ARIM parameters\r\n              $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            }\r\n            const chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n            lineChart.setEvents(chart, $scope, app);\r\n\r\n          // Table display mode\r\n          } else {\r\n            // Get locale info\r\n            const locale = utils.getLocale($scope, 0);\r\n\r\n            // Get number format\r\n            const numberFormat = utils.getNumberFormat($scope, 0);\r\n\r\n            // Store actual values to datasets\r\n            const dataLength = dataPages[0].qMatrix.length;\r\n            const dataset = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              dataset.push([\r\n                value[0].qElemNumber,\r\n                value[0].qText,\r\n                locale.format(numberFormat)(value[1].qNum).replace(/G/, 'B'),\r\n                '',\r\n                '',\r\n                '',\r\n              ]);\r\n            });\r\n\r\n            for (let i = 0; i < layout.props.forecastingPeriods; i++) {\r\n              dataset.push([\r\n                '',\r\n                `+${i + 1}`, // Forecast period is displayed as +1, +2, +3...\r\n                '',\r\n                locale.format(numberFormat)(mean[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(upper[i]).replace(/G/, 'B'),\r\n                locale.format(numberFormat)(lower[i]).replace(/G/, 'B'),\r\n              ]);\r\n            }\r\n\r\n            const html = `\r\n              <table id=\"aat-table-${$scope.extId}\" class=\"display\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>qElemNumber</th>\r\n                    <th>${$scope.layout.props.dimensions[0].label}</th>\r\n                    <th>${$scope.layout.props.measures[0].label}</th>\r\n                    <th>Fit</th>\r\n                    <th>Lower</th>\r\n                    <th>Upper</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                </tbody>\r\n              </table>`;\r\n\r\n            datatables.draw(app, $scope, `#aat-table-${$scope.extId}`, dataset, html, null).then((table) => {\r\n              datatables.setEvents(table, $scope, app);\r\n            });\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}