{"version":3,"sources":["analysis/logistic_regression.js"],"names":["define","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","meaLen","measures","length","rowsLabel","label","validateMeasure","params","meaList","dataType","i","mea","param","push","splitData","splitDataset","splitPercentage","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","result","parse","estimate","stdError","zValue","pr","residuals","dispersion","nullDeviance","nullDf","residualDeviance","residualDf","aic","iter","html","$","resolve","promise"],"mappings":"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","file":"../../js/analysis/logistic_regression.js","sourcesContent":["define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = ['(Intercept)', (layout.props.measures[1].label != '') ? layout.props.measures[1].label : utils.validateMeasure(layout.props.measures[0]) ]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'mea0 ~ mea1';\r\n      let dataType = 'NN';\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      // Split dataset into training and test datasets\r\n      const splitData = utils.splitData(layout.props.splitDataset, layout.props.splitPercentage, meaLen);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEvalExStr('${dataType}','library(jsonlite); ${splitData} lm_result <- glm(${meaList}, data=training_data, family=binomial(link=\"logit\"));lm_summary <- summary(lm_result);\r\n            json <- toJSON(list(coef(lm_summary)[,\"Estimate\"], coef(lm_summary)[,\"Std. Error\"], coef(lm_summary)[,\"z value\"], coef(lm_summary)[,\"Pr(>|z|)\"],\r\n            as.double(summary(lm_summary$deviance.resid)), lm_summary$dispersion, lm_summary$null.deviance, lm_summary$df.null, lm_summary$deviance, lm_summary$df.residual, lm_summary$aic, lm_summary$iter)); json;',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 2,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const estimate = result[0];\r\n          const stdError = result[1];\r\n          const zValue = result[2];\r\n          const pr = result[3];\r\n\r\n          const residuals = result[4];\r\n\r\n          const dispersion = result[5];\r\n          const nullDeviance = result[6];\r\n          const nullDf = result[7];\r\n          const residualDeviance = result[8];\r\n          const residualDf = result[9];\r\n          const aic = result[10];\r\n          const iter = result[11];\r\n\r\n          // Set table header\r\n          let html = `\r\n            <h2>Residuals:</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Min</th><th>1Q</th><th>Median</th><th>3Q</th><th>Max</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>${residuals[0]}</td><td>${residuals[1]}</td><td>${residuals[2]}</td><td>${residuals[4]}</td><td>${residuals[5]}</td>\r\n                </tr>\r\n             </tbody>\r\n            </table>\r\n\r\n            <h2>Coefficients:</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th></th><th>Estimate</th><th>Std.Error</th><th>z value</th><th>Pr(>|z|)</th><th>Signif</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n          `;\r\n\r\n          // Set regression analysis results to table\r\n          for (let i = 0; i < $scope.rowsLabel.length; i++) {\r\n            html += `<tr><td>${$scope.rowsLabel[i]}</td><td>${estimate[i]}</td><td>${stdError[i]}</td><td>${zValue[i]}</td><td>${pr[i]}</td>\r\n                      <td>${(pr[i] < 0.001) ? '<span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.01) ? '<span class=\"lui-icon  lui-icon--star\"></span><span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.05) ? '<span class=\"lui-icon  lui-icon--star\"></span>' : (pr[i] < 0.1) ? '.' : ''}</td>\r\n                    </tr>`;\r\n          }\r\n\r\n          // Set table footer and other results\r\n          html += `\r\n              </tbody>\r\n            </table>\r\n            <div>Signif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1</div>\r\n            <div>(Dispersion parameter for binomial family taken to be ${dispersion})</div>\r\n\r\n            <h2>Others:</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Item</th><th>Value</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr><td>Null deviance</td><td>${nullDeviance[0]} on ${nullDf[0]} degrees of freedom</td></tr>\r\n                <tr><td>Residual deviance</td><td>${residualDeviance[0]} on ${residualDf[0]} degrees of freedom</td></tr>\r\n                <tr><td>AIC</td><td>${aic[0]}</td></tr>\r\n                <tr><td>Number of Fisher Scoring iterations</td><td>${iter[0]}</td></tr>\r\n             </tbody>\r\n            </table>\r\n          `;\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(html);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}