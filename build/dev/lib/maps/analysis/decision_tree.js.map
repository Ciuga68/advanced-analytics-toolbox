{"version":3,"sources":["analysis/decision_tree.js"],"names":["define","tree","d3","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","meaLen","measures","length","params","validateMeasure","meaList","dataType","paramNames","measureLabels","label","i","mea","param","push","splitData","splitDataset","splitPercentage","rpartMethod","minSplit","minBucket","cp","maxDepth","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qMatrix","qText","displayConnectionError","extId","result","parse","$","html","levelsList","chartData","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/decision_tree.js","sourcesContent":["define([\r\n  '../chart/tree_chart',\r\n  '../../vendor/d3.min',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (tree, d3, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n      let meaList = 'mea0 ~ mea1';\r\n      let dataType = 'SS';\r\n\r\n      // Array to replace param names (q$meaX) to a measure label on tree chart\r\n      $scope.paramNames = ['mea0', 'mea1'];\r\n      $scope.measureLabels = [layout.props.measures[0].label, layout.props.measures[1].label];\r\n\r\n      for (let i = 2; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += ` + mea${i}`;\r\n          dataType += 'S';\r\n\r\n          $scope.paramNames.push(`mea${i}`);\r\n          $scope.measureLabels.push(layout.props.measures[i].label);\r\n        }\r\n      }\r\n\r\n      // Split dataset into training and test datasets\r\n      const splitData = utils.splitData(layout.props.splitDataset, layout.props.splitPercentage, meaLen);\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEvalExStr('${dataType}','library(rpart);library(partykit);library(d3r);library(jsonlite);set.seed(10);\r\n                    q<-lapply(q, function(x){ ifelse(!is.na(as.numeric(x)), as.numeric(x), x) }); ${splitData}\r\n                    res<-rpart(${meaList}, data=training_data, method=\"${layout.props.rpartMethod}\", control=list(minsplit=${layout.props.minSplit}, minbucket=${layout.props.minBucket}, cp=${layout.props.cp}, maxdepth=${layout.props.maxDepth}));\r\n                    pa<-partykit::as.party(res); if(length(pa) > 0) {node<-d3_party(res);} else {node <- c(\"root\");}\r\n                    json<-toJSON(list(levels(factor(training_data$mea0)),node)); json;',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          if (result[1][0] == 'root') {\r\n            // Set HTML element for chart\r\n            $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\">\r\n              <p style=\"width:100%;text-align:center;position:relative;top:50%;transform:translateY(-50%);\">Only root node is returned. More information needs to be provided to grow the decision tree.\r\n              </div>`);\r\n          } else {\r\n            // var chartData = d3.hierarchy(result);\r\n            $scope.levelsList = result[0];\r\n            const chartData = JSON.parse(result[1]);\r\n\r\n            // Set HTML element for chart\r\n            $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n            tree.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, null);\r\n          }\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}