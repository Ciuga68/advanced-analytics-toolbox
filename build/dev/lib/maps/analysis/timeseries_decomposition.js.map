{"version":3,"sources":["analysis/timeseries_decomposition.js"],"names":["define","lineChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","measure","validateMeasure","measures","frequency","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","measureInfo","qHyperCube","qMeasureInfo","isNaN","qMin","qMax","displayConnectionError","extId","elemNum","dim","mea","palette","getDefaultPaletteColor","chartData","_loop","i","$","each","qMatrix","key","value","push","qElemNumber","qText","qNum","dataset","x","y","name","mode","fill","line","fillcolor","colors","colorForMain","marker","color","size","datapoints","pointRadius","width","borderWidth","decomposeInFourCharts","xaxis","yaxis","html","chart","customOptions","showlegend","showLegend","showgrid","xScale","title","domain","yScale","tickformat","getTickFormat","tickprefix","getPrefix","ticksuffix","getSuffix","yaxis2","anchor","yaxis3","yaxis4","dragmode","margin","r","yAxisPosition","marginRight","l","marginLeft","t","xAxisPosition","marginTop","b","marginBottom","draw","setEvents","resolve","promise"],"mappings":"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","file":"../../js/analysis/timeseries_decomposition.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: measure,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('library(dplyr);data<-ts(q$Measure,frequency=${layout.props.frequency});(decompose(data)$trend);', ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('library(dplyr);data<-ts(q$Measure,frequency=${layout.props.frequency});(decompose(data)$seasonal);', ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEval('library(dplyr);data<-ts(q$Measure,frequency=${layout.props.frequency});(decompose(data)$random);', ${measure} as Measure)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (isNaN(measureInfo[1].qMin) && isNaN(measureInfo[1].qMax)\r\n          && isNaN(measureInfo[2].qMin) && isNaN(measureInfo[2].qMax)\r\n          && isNaN(measureInfo[3].qMin) && isNaN(measureInfo[3].qMax)\r\n        ) {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          let elemNum;\r\n          let dim;\r\n          let mea;\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const chartData = [];\r\n          for (let i = 1; i < 5; i++) {\r\n            elemNum = [];\r\n            dim = [];\r\n            mea = [];\r\n\r\n            $.each(dataPages[0].qMatrix, (key, value) => {\r\n              elemNum.push(value[0].qElemNumber);\r\n              dim.push(value[0].qText);\r\n              mea.push(value[i].qNum);\r\n            });\r\n            const dataset = {\r\n              x: dim,\r\n              y: mea,\r\n              elemNum,\r\n              name: (i === 1) ? 'Observed' : (i === 2) ? 'Trend' : (i === 3) ? 'Seasonal' : (i === 4) ? 'Random' : '',\r\n              mode: 'lines+markers',\r\n              fill: layout.props.line,\r\n              fillcolor: (layout.props.colors) ? `rgba(${palette[3]},0.3)` : `rgba(${palette[layout.props.colorForMain]},0.3)`,\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: (layout.props.datapoints) ? layout.props.pointRadius : 1,\r\n              },\r\n              line: {\r\n                width: layout.props.borderWidth,\r\n              },\r\n            };\r\n\r\n            if (layout.props.decomposeInFourCharts && i != 4) {\r\n              dataset.xaxis = 'x';\r\n              dataset.yaxis = 'y' + (5 - i);\r\n            }\r\n\r\n            chartData.push(dataset);\r\n          } // end of for loop\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          let chart = '';\r\n          if (layout.props.decomposeInFourCharts) {\r\n            const customOptions = {\r\n              showlegend: $scope.layout.props.showLegend,\r\n              xaxis: {\r\n                showgrid: $scope.layout.props.xScale,\r\n              },\r\n              yaxis: {\r\n                title: 'Random',\r\n                domain: [0, 0.24],\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              yaxis2: {\r\n                title: 'Seasonal',\r\n                domain: [0.25, 0.49],\r\n                anchor: 'x2',\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              yaxis3: {\r\n                title: 'Trend',\r\n                domain: [0.5, 0.74],\r\n                anchor: 'x3',\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              yaxis4: {\r\n                title: 'Observed',\r\n                domain: [0.74, 1],\r\n                anchor: 'x4',\r\n                showgrid: $scope.layout.props.yScale,\r\n                tickformat: utils.getTickFormat($scope, 0),\r\n                tickprefix: utils.getPrefix($scope, 0),\r\n                ticksuffix: utils.getSuffix($scope, 0),\r\n              },\r\n              dragmode: 'select',\r\n              margin: {\r\n                r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n                l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n                t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 70 : $scope.layout.props.marginTop,\r\n                b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n              },\r\n            }\r\n            chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n          } else {\r\n            chart = lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, null);\r\n          }\r\n          lineChart.setEvents(chart, $scope, app);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}