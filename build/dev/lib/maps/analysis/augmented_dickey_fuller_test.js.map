{"version":3,"sources":["analysis/augmented_dickey_fuller_test.js"],"names":["define","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","measure","validateMeasure","measures","dataType","expression","dataTitle","differencing","seasonalDifferences","firstDifferences","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","length","displayConnectionError","extId","result","parse","$","html","resolve","promise"],"mappings":"AAAA,YAAAA,SACE,gBACA,SACC,SAACC,EAAOC,GACT,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAMhBC,EAAYN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAC5DA,IAAgBC,MAAQC,YAAaL,MACrCM,EAAUZ,EAAMa,gBAAgBR,EAAOG,MAAMM,SAAS,IAItDC,EAAW,IACbC,EAAa,IACjBZ,GAAOa,UAAY,KAEe,IAA9BZ,EAAOG,MAAMU,cACfF,EAAAA,sBAAmCD,EAAnC,yEAAoHV,EAAOG,MAAMW,oBAAjI,4EAAgOP,EAAhO,eACAR,EAAOa,UAAP,QAA2BL,EAA3B,IAAsCP,EAAOG,MAAMW,oBAAnD,KACuC,IAA9Bd,EAAOG,MAAMU,cACtBF,EAAAA,sBAAmCD,EAAnC,8EAAyHV,EAAOG,MAAMW,oBAAtI,MAA+Jd,EAAOG,MAAMY,iBAA5K,4EAAwQR,EAAxQ,eACAR,EAAOa,UAAP,aAAgCL,EAAhC,KAA4CP,EAAOG,MAAMW,oBAAzD,KAAiFd,EAAOG,MAAMY,iBAA9F,MAEAJ,EAAAA,sBAAmCD,EAAnC,0IAAqLH,EAArL,eACAR,EAAOa,UAAYL,EAGrB,IAAME,KAEFJ,MACEW,OAAQ,UACRX,KAAMM,KAIRN,MACEW,OAAQ,IACRX,KAAM,MAIRA,MACEW,OAAQ,IACRX,KAAM,MAIRA,MACEW,OAAQ,IACRX,KAAM,MAIRA,MACEW,OAAQ,IACRX,KAAM,KAmBZ,OAdAN,GAAOkB,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUnB,KAGvBe,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUd,MAExB,GAEHV,EAAOyB,cAAe,EACf,MASTC,UA7FK,SA6FK1B,GACR,GAAM2B,GAAQ9B,EAAG8B,QACX1B,EAASD,EAAOC,OAGhB2B,GADYhC,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,MAEhEwB,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,IAkCX,OA/BAhC,GAAOkB,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GACvBnC,EAAOC,OAAOmC,WAAWC,YAG7C,IAAgD,IAA5CF,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCL,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAC9E3C,EAAM6C,uBAAuBzC,EAAO0C,WAC/B,CACL,GAAMC,GAASpB,KAAKqB,MAAMT,EAAU,GAAGG,QAAQ,GAAG,GAAGC,MAGrDM,GAAAA,gCAAkC7C,EAAO0C,OACxCI,KADD,mSAU6B9C,EAAOa,UAVpC,6DAWsC8B,EAAO,GAX7C,yDAYkCA,EAAO,GAZzC,uDAagCA,EAAO,GAbvC,qIAmBF,MAAOhB,GAAMoB,YAERpB,EAAMqB","file":"../../js/analysis/augmented_dickey_fuller_test.js","sourcesContent":["define([\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n      const measure = utils.validateMeasure(layout.props.measures[0]);\r\n\r\n\r\n      // Set first and seasonal differences to acf and pacf\r\n      const dataType = 'N';\r\n      let expression = null;\r\n      $scope.dataTitle = null;\r\n\r\n      if (layout.props.differencing === 1) {\r\n        expression = `R.ScriptEvalExStr('${dataType}','library(jsonlite); library(tseries); res<-adf.test(diff(q$Measure, ${layout.props.seasonalDifferences})); json<-toJSON(list(res$statistic,res$parameter,res$p.value)); json;', ${measure} as Measure)`;\r\n        $scope.dataTitle = `diff(${measure},${layout.props.seasonalDifferences})`;\r\n      } else if (layout.props.differencing === 2) {\r\n        expression = `R.ScriptEvalExStr('${dataType}','library(jsonlite); library(tseries); res<-adf.test(diff(diff(q$Measure, ${layout.props.seasonalDifferences}), ${layout.props.firstDifferences})); json<-toJSON(list(res$statistic,res$parameter,res$p.value)); json;', ${measure} as Measure)`;\r\n        $scope.dataTitle = `diff(diff(${measure}, ${layout.props.seasonalDifferences}),${layout.props.firstDifferences})`;\r\n      } else {\r\n        expression = `R.ScriptEvalExStr('${dataType}','library(jsonlite); library(tseries); res<-adf.test(q$Measure); json<-toJSON(list(res$statistic,res$parameter,res$p.value)); json;', ${measure} as Measure)`;\r\n        $scope.dataTitle = measure;\r\n      }\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qLabel: 'Results',\r\n            qDef: expression,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`)\r\n          .html(`\r\n            <h2>Augmented Dickey-Fuller Test</h2>\r\n            <table class=\"simple\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Item</th><th>Value</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr><td>data</td><td>${$scope.dataTitle}</td></tr>\r\n                <tr><td>Dickey-Fuller</td><td>${result[0]}</td></tr>\r\n                <tr><td>Lag order</td><td>${result[1]}</td></tr>\r\n                <tr><td>p-value</td><td>${result[2]}</td></tr>\r\n              </tbody>\r\n            </table>\r\n            <div>* alternative hypothesis: stationary</div>\r\n          `);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}