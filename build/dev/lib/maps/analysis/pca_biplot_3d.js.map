{"version":3,"sources":["analysis/pca_biplot_3d.js"],"names":["define","bubbleChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","meaLen","measures","length","rowsLabel","validateMeasure","params","meaList","dataType","i","mea","param","push","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","palette","getDefaultPaletteColor","dim1","$","each","key","value","result","parse","x","rotation","mea1","mea2","mea3","allMea1","allMea2","allMea3","Math","abs","maxValMea1","max","apply","maxValMea2","maxValMea3","chartData","y","z","xaxis","yaxis","zaxis","text","name","mode","type","marker","size","bubbleSize","opacity","line","width","arrowX","arrowY","arrowZ","allArrowX","allArrowY","allArrowZ","maxValArrowX","maxValArrowY","maxValArrowZ","customOptions","title","titlefont","color","showgrid","xScale","tickfont","overlaying","side","range","yScale","zScale","xaxis2","yaxis2","zaxis2","margin","r","l","t","b","annotations","xref","yref","zref","ax","ay","az","axref","ayref","azref","showarrow","arrowcolor","colorForSub","arrowhead","font","html","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/pca_biplot_3d.js","sourcesContent":["define([\r\n  '../chart/bubble_3d_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (bubbleChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      // Set definitions for dimensions and measures\r\n      const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n      const meaLen = layout.props.measures.length;\r\n      $scope.rowsLabel = [utils.validateMeasure(layout.props.measures[0])]; // Label for dimension values\r\n      let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0`;\r\n      let meaList = 'q$mea0';\r\n      let dataType = 'N';\r\n\r\n      for (let i = 1; i < meaLen; i++) {\r\n        const mea = utils.validateMeasure(layout.props.measures[i]);\r\n        if (mea.length > 0) {\r\n          const param = `,${mea} as mea${i}`;\r\n          params += param;\r\n          meaList += `,q$mea${i}`;\r\n          dataType += 'N';\r\n\r\n          $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n        }\r\n      }\r\n\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qDef: `R.ScriptEvalExStr('${dataType}','library(jsonlite); pca_result<-prcomp(data.frame(${meaList}), scale = TRUE); json<-toJSON(list(summary(pca_result)$x, summary(pca_result)$rotation)); json;',${params})`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1500,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          // Get dimension\r\n          const dim1 = [];\r\n\r\n          $.each(dataPages[0].qMatrix, (key, value) => {\r\n            dim1.push(value[0].qText);\r\n          });\r\n\r\n          // Get PCA result\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n          const x = result[0];\r\n          const rotation = result[1];\r\n\r\n          // Draw plot for pca_result$x\r\n          const mea1 = [];\r\n          const mea2 = [];\r\n          const mea3 = [];\r\n          const allMea1 = [];\r\n          const allMea2 = [];\r\n          const allMea3 = [];\r\n\r\n          $.each(x, (key, value) => {\r\n            mea1.push(value[0]);\r\n            mea2.push(value[1]);\r\n            mea3.push(value[2]);\r\n            allMea1.push(Math.abs(value[0]));\r\n            allMea2.push(Math.abs(value[1]));\r\n            allMea3.push(Math.abs(value[2]));\r\n          });\r\n\r\n          const maxValMea1 = Math.max.apply(null, allMea1);\r\n          const maxValMea2 = Math.max.apply(null, allMea2);\r\n          const maxValMea3 = Math.max.apply(null, allMea3);\r\n\r\n          const chartData = [\r\n            {\r\n              x: mea1,\r\n              y: mea2,\r\n              z: mea3,\r\n              xaxis: 'x2',\r\n              yaxis: 'y2',\r\n              zaxis: 'z2',\r\n              text: dim1,\r\n              name: dimension,\r\n              mode: 'markers',\r\n              type: 'scatter3d',\r\n              marker: {\r\n                size: layout.props.bubbleSize,\r\n                opacity: 0.8,\r\n                line: {\r\n                  width: 1\r\n                }\r\n              },\r\n            }\r\n          ];\r\n\r\n          // Draw annotation line for pca_result$rotation\r\n          const arrowX = [];\r\n          const arrowY = [];\r\n          const arrowZ = [];\r\n          const allArrowX = [];\r\n          const allArrowY = [];\r\n          const allArrowZ = [];\r\n\r\n          $.each(rotation, (key, value) => {\r\n            arrowX.push(value[0]);\r\n            arrowY.push(value[1]);\r\n            arrowZ.push(value[2]);\r\n            allArrowX.push(Math.abs(value[0]));\r\n            allArrowY.push(Math.abs(value[1]));\r\n            allArrowZ.push(Math.abs(value[2]));\r\n          });\r\n\r\n          const maxValArrowX = Math.max.apply(null, allArrowX);\r\n          const maxValArrowY = Math.max.apply(null, allArrowY);\r\n          const maxValArrowZ = Math.max.apply(null, allArrowZ);\r\n\r\n          const customOptions = {\r\n            xaxis: {\r\n              title: 'PC1',\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              showgrid: $scope.layout.props.xScale,\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'x',\r\n              side: 'bottom',\r\n              range: [(maxValArrowX) * -1 * 1.1, maxValArrowX * 1.1],\r\n            },\r\n            yaxis: {\r\n              title: 'PC2',\r\n              showgrid: $scope.layout.props.yScale,\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'y',\r\n              side: 'left',\r\n              range: [(maxValArrowY) * -1 * 1.1, maxValArrowY * 1.1],\r\n            },\r\n            zaxis: {\r\n              title: 'PC3',\r\n              showgrid: $scope.layout.props.zScale,\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'z',\r\n              side: 'left',\r\n              range: [(maxValArrowZ) * -1 * 1.1, maxValArrowZ * 1.1],\r\n            },\r\n            xaxis2: {\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'x',\r\n              side: 'top',\r\n              range: [(maxValMea1) * -1 * 1.1, maxValMea1 * 1.1],\r\n            },\r\n            yaxis2: {\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'y',\r\n              side: 'right',\r\n              range: [(maxValMea2) * -1 * 1.1, maxValMea2 * 1.1],\r\n            },\r\n            zaxis2: {\r\n              titlefont: {color: 'rgb(148, 103, 189)'},\r\n              tickfont: {color: 'rgb(148, 103, 189)'},\r\n              overlaying: 'z',\r\n              side: 'right',\r\n              range: [(maxValMea3) * -1 * 1.1, maxValMea3 * 1.1],\r\n            },\r\n            margin: { r: 50, l: 50, t: 50, b: 50 },\r\n            annotations: [\r\n            ],\r\n          }\r\n\r\n          for (let i = 0; i < $scope.rowsLabel.length; i++) {\r\n            customOptions.annotations.push(\r\n              {\r\n                x: arrowX[i],\r\n                y: arrowY[i],\r\n                z: arrowZ[i],\r\n                xref: 'x',\r\n                yref: 'y',\r\n                zref: 'z',\r\n                ax: 0,\r\n                ay: 0,\r\n                az: 0,\r\n                axref: 'x',\r\n                ayref: 'y',\r\n                azref: 'y',\r\n                showarrow: true,\r\n                arrowcolor: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                arrowhead: 3,\r\n              },\r\n              {\r\n                x: arrowX[i],\r\n                y: arrowY[i],\r\n                z: arrowZ[i],\r\n                text: $scope.rowsLabel[i],\r\n                font: {\r\n                  color: `rgba(${palette[layout.props.colorForSub]},1)`,\r\n                },\r\n                showarrow: false,\r\n              }\r\n            );\r\n          }\r\n\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          bubbleChart.draw($scope, app, chartData, `aat-chart-${$scope.extId}`, null);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}