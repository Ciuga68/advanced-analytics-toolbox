{"version":3,"sources":["analysis/logistic_regression_coefplot.js"],"names":["define","lineChart","utils","$q","createCube","app","$scope","layout","dimension","validateDimension","props","dimensions","qDef","qFieldDefs","meaLen","measures","length","rowsLabel","label","validateMeasure","params","meaList","dataType","i","mea","param","push","splitData","splitDataset","splitPercentage","qLabel","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qHyperCube","qMeasureInfo","qMatrix","qText","displayConnectionError","extId","palette","getDefaultPaletteColor","result","parse","x","array","all","$","each","key","value","Math","abs","maxVal","max","apply","chartData","y","name","error_x","type","symmetric","arrayminus","thickness","borderWidth","color","colors","colorForMain","mode","marker","size","pointRadius","customOptions","showlegend","showLegend","xaxis","showgrid","xScale","side","xAxisPosition","range","yaxis","yScale","yAxisPosition","autorange","separators","getSeparators","dragmode","margin","r","marginRight","l","marginLeft","t","marginTop","b","marginBottom","html","draw","resolve","promise"],"mappings":"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","file":"../../js/analysis/logistic_regression_coefplot.js","sourcesContent":["define([\r\n  '../chart/line_chart',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (lineChart, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n     createCube(app, $scope) {\r\n       const layout = $scope.layout;\r\n\r\n       // Display loader\r\n       // utils.displayLoader($scope.extId);\r\n\r\n       const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n       // Set definitions for dimensions and measures\r\n       const dimensions = [{ qDef: { qFieldDefs: [dimension] } }];\r\n\r\n       const meaLen = layout.props.measures.length;\r\n       $scope.rowsLabel = ['(Intercept)', (layout.props.measures[1].label != '') ? layout.props.measures[1].label : utils.validateMeasure(layout.props.measures[0]) ]; // Label for dimension values\r\n       let params = `${utils.validateMeasure(layout.props.measures[0])} as mea0, ${utils.validateMeasure(layout.props.measures[1])} as mea1`;\r\n       let meaList = 'mea0 ~ mea1';\r\n       let dataType = 'NN';\r\n\r\n       for (let i = 2; i < meaLen; i++) {\r\n         const mea = utils.validateMeasure(layout.props.measures[i]);\r\n         if (mea.length > 0) {\r\n           const param = `,${mea} as mea${i}`;\r\n           params += param;\r\n           meaList += ` + mea${i}`;\r\n           dataType += 'N';\r\n\r\n           $scope.rowsLabel.push(utils.validateMeasure(layout.props.measures[i]));\r\n         }\r\n       }\r\n\r\n       // Split dataset into training and test datasets\r\n       const splitData = utils.splitData(layout.props.splitDataset, layout.props.splitPercentage, meaLen);\r\n\r\n       const measures = [\r\n         {\r\n           qDef: {\r\n             qDef: `R.ScriptEvalExStr('${dataType}','library(jsonlite); ${splitData} lm_result <- glm(${meaList}, data=training_data, family=binomial(link=\"logit\"));\r\n             res<-toJSON(coef(summary(lm_result)));res;',${params})`,\r\n           },\r\n         },\r\n         {\r\n           qDef: {\r\n             qLabel: '-',\r\n             qDef: '', // Dummy\r\n           },\r\n         },\r\n         {\r\n           qDef: {\r\n             qLabel: '-',\r\n             qDef: '', // Dummy\r\n           },\r\n         },\r\n         {\r\n           qDef: {\r\n             qLabel: '-',\r\n             qDef: '', // Dummy\r\n           },\r\n         },\r\n         {\r\n           qDef: {\r\n             qLabel: '-',\r\n             qDef: '', // Dummy\r\n           },\r\n         },\r\n       ];\r\n\r\n       $scope.backendApi.applyPatches([\r\n         {\r\n           qPath: '/qHyperCubeDef/qDimensions',\r\n           qOp: 'replace',\r\n           qValue: JSON.stringify(dimensions),\r\n         },\r\n         {\r\n           qPath: '/qHyperCubeDef/qMeasures',\r\n           qOp: 'replace',\r\n           qValue: JSON.stringify(measures),\r\n         },\r\n       ], false);\r\n\r\n       $scope.patchApplied = true;\r\n       return null;\r\n     },\r\n    /**\r\n    * drawChart - draw chart with updated data\r\n    *\r\n    * @param {Object} $scope angular $scope\r\n    *\r\n    * @return {Object} Promise object\r\n    */\r\n    drawChart($scope) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        const measureInfo = $scope.layout.qHyperCube.qMeasureInfo;\r\n\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n          const result = JSON.parse(dataPages[0].qMatrix[0][1].qText);\r\n\r\n          const x = [];\r\n          const array = [];\r\n          const all = [];\r\n          $.each(result, (key, value) => {\r\n            x.push(value[0]);\r\n            array.push(value[1]);\r\n            all.push(Math.abs(value[0] + value[1]));\r\n            all.push(Math.abs(value[0] - value[1]));\r\n          });\r\n\r\n          const maxVal = Math.max.apply(null, all);\r\n\r\n          const chartData = [\r\n            {\r\n              x: x,\r\n              y: $scope.rowsLabel,\r\n              name: 'Coefficients plot',\r\n              error_x: {\r\n                type: 'data',\r\n                symmetric: false,\r\n                array: array,\r\n                arrayminus: array,\r\n                thickness: layout.props.borderWidth,\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n              },\r\n              type: 'scatter',\r\n              mode: 'markers',\r\n              marker: {\r\n                color: (layout.props.colors) ? `rgba(${palette[3]},1)` : `rgba(${palette[layout.props.colorForMain]},1)`,\r\n                size: layout.props.pointRadius,\r\n              },\r\n            }\r\n          ];\r\n\r\n          const customOptions = {\r\n            showlegend: $scope.layout.props.showLegend,\r\n            xaxis: {\r\n              showgrid: $scope.layout.props.xScale,\r\n              side: $scope.layout.props.xAxisPosition,\r\n              range: [(maxVal * 1.1) * -1, (maxVal * 1.1)],\r\n            },\r\n            yaxis: {\r\n              showgrid: $scope.layout.props.yScale,\r\n              side: $scope.layout.props.yAxisPosition,\r\n              autorange: 'reversed',\r\n              range: [-1, ($scope.rowsLabel.length)],\r\n            },\r\n            separators: utils.getSeparators($scope, 0),\r\n            dragmode: 'select',\r\n            margin: {\r\n              r: ($scope.layout.props.yAxisPosition == 'right') ? $scope.layout.props.marginRight + 70 : $scope.layout.props.marginRight,\r\n              l: ($scope.layout.props.yAxisPosition == 'left') ? $scope.layout.props.marginLeft + 70 : $scope.layout.props.marginLeft,\r\n              t: ($scope.layout.props.xAxisPosition == 'top') ? $scope.layout.props.marginTop + 70 : $scope.layout.props.marginTop,\r\n              b: ($scope.layout.props.xAxisPosition == 'bottom') ? $scope.layout.props.marginBottom + 70 : $scope.layout.props.marginBottom,\r\n            },\r\n          };\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div id=\"aat-chart-${$scope.extId}\" style=\"width:100%;height:100%;\"></div>`);\r\n\r\n          lineChart.draw($scope, chartData, `aat-chart-${$scope.extId}`, customOptions);\r\n\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}