{"version":3,"sources":["analysis/textmining_wordcloud.js"],"names":["define","wordCloud","utils","$q","createCube","app","$scope","layout","dimension0","validateDimension","props","dimensions","qDef","qFieldDefs","dimension1","measures","qLabel","tolower","removeNumbers","stopwords","removePunctuation","stemming","numOfFrequentTerms","backendApi","applyPatches","qPath","qOp","qValue","JSON","stringify","patchApplied","drawChart","defer","requestPage","qTop","qLeft","qWidth","qHeight","getData","then","dataPages","qMatrix","qText","length","displayConnectionError","extId","text","getDefaultPaletteColor","parse","weight","dataset","_loop","i","push","handlers","click","selectAssociations","qSearchFields","$","html","draw","resolve","promise"],"mappings":"AAAA,YAAAA,SACE,qBACA,gBACA,SACC,SAACC,EAAWC,EAAOC,GACpB,OASEC,WATK,SASMC,EAAKC,GACd,GAAMC,GAASD,EAAOC,OAKhBC,EAAaN,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAE7DA,IAEFC,MACEC,YAAaL,MAIbM,EAAaZ,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,IAC7DI,IAEFH,MACEI,OAAQ,SACRJ,KAAAA,gdASuBL,EAAOG,MAAMO,QATpC,6CAU6BV,EAAOG,MAAMQ,cAV1C,yCAWyBX,EAAOG,MAAMS,UAXtC,iDAYiCZ,EAAOG,MAAMU,kBAZ9C,wCAawBb,EAAOG,MAAMW,SAbrC,mLAiBmCd,EAAOG,MAAMY,mBAjBhD,eAiBiFf,EAAOG,MAAMY,mBAjB9F,2GAoBYR,EApBZ,eAwBFF,MACEI,OAAQ,IACRJ,KAAM,MAIRA,MACEI,OAAQ,IACRJ,KAAM,MAIRA,MACEI,OAAQ,IACRJ,KAAM,MAIRA,MACEI,OAAQ,IACRJ,KAAM,KAmBZ,OAdAN,GAAOiB,WAAWC,eAEdC,MAAO,6BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUlB,KAGvBc,MAAO,2BACPC,IAAK,UACLC,OAAQC,KAAKC,UAAUd,MAExB,GAEHT,EAAOwB,cAAe,EACf,MAUTC,UAtGK,SAsGKzB,EAAQD,GAChB,GAAM2B,GAAQ7B,EAAG6B,QACXzB,EAASD,EAAOC,OAGhB0B,IACJC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAAS,GAmCX,OAhCA/B,GAAOiB,WAAWe,QAAQL,GAAaM,KAAK,SAACC,GA8B3C,MA5BgD,KAA5CA,EAAU,GAAGC,QAAQ,GAAG,GAAGC,MAAMC,QAAoD,KAApCH,EAAU,GAAGC,QAAQ,GAAG,GAAGC,MAC9ExC,EAAM0C,uBAAuBtC,EAAOuC,QAC/B,WAOL,IAAK,GAJCC,IAFU5C,EAAM6C,yBAETnB,KAAKoB,MAAMR,EAAU,GAAGC,QAAQ,GAAG,GAAGC,OAAO,IACpDO,EAASrB,KAAKoB,MAAMR,EAAU,GAAGC,QAAQ,GAAG,GAAGC,OAAO,GAEtDQ,KANDC,EAAA,SAOIC,GACPF,EAAQG,MAEJP,KAAMA,EAAKM,GACXH,OAAQA,EAAOG,GACfE,UACEC,MAAO,WACLlD,EAAImD,mBAAmB,GAAIV,EAAKM,KAAOK,eAAiBvD,EAAMO,kBAAkBF,EAAOG,MAAMC,WAAW,YAPzGyC,EAAI,EAAGA,EAAIN,EAAKH,OAAQS,IAAKD,EAA7BC,EAeTM,GAAAA,gCAAkCpD,EAAOuC,OAASc,KAAlD,8DAEA1D,EAAU2D,KAAKV,MAEVlB,EAAM6B,YAER7B,EAAM8B","file":"../../js/analysis/textmining_wordcloud.js","sourcesContent":["define([\r\n  '../chart/wordcloud',\r\n  '../util/utils',\r\n  'ng!$q',\r\n], (wordCloud, utils, $q) => {\r\n  return {\r\n    /**\r\n     * createCube - create HyperCubes\r\n     *\r\n     * @param {Object} app    reference to app\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Null} null\r\n     */\r\n    createCube(app, $scope) {\r\n      const layout = $scope.layout;\r\n\r\n      // Display loader\r\n      // utils.displayLoader($scope.extId);\r\n\r\n      const dimension0 = utils.validateDimension(layout.props.dimensions[0]);\r\n\r\n      const dimensions = [\r\n        {\r\n          qDef: {\r\n            qFieldDefs: [dimension0],\r\n          },\r\n        },\r\n      ];\r\n      const dimension1 = utils.validateDimension(layout.props.dimensions[1]);\r\n      const measures = [\r\n        {\r\n          qDef: {\r\n            qLabel: 'Result',\r\n            qDef: `R.ScriptEvalExStr('S','\r\n                     library(tm);\r\n                     library(jsonlite);\r\n                     library(SnowballC);\r\n                     counter <- 1:length(q$text);\r\n                     res <- c();\r\n                     for(i in counter) res <- paste(res, q$text[i]);\r\n                     corpus<-VCorpus(VectorSource(res));\r\n                     tdm <- TermDocumentMatrix(corpus, control = list(\r\n                       tolower = ${layout.props.tolower},\r\n                       removeNumbers = ${layout.props.removeNumbers},\r\n                       stopwords = ${layout.props.stopwords},\r\n                       removePunctuation = ${layout.props.removePunctuation},\r\n                       stemming = ${layout.props.stemming}\r\n                     ));\r\n                     m <-as.matrix(tdm)\r\n                     sorted<-m[order(m[,1], decreasing=T),];\r\n                     x<-list(names(sorted)[1:${layout.props.numOfFrequentTerms}], sorted[1:${layout.props.numOfFrequentTerms}]);\r\n                     json<-toJSON(x, pretty=T);\r\n                     json;\r\n                   ', ${dimension1} AS text)`,\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n        {\r\n          qDef: {\r\n            qLabel: '-',\r\n            qDef: '', // Dummy\r\n          },\r\n        },\r\n      ];\r\n\r\n      $scope.backendApi.applyPatches([\r\n        {\r\n          qPath: '/qHyperCubeDef/qDimensions',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(dimensions),\r\n        },\r\n        {\r\n          qPath: '/qHyperCubeDef/qMeasures',\r\n          qOp: 'replace',\r\n          qValue: JSON.stringify(measures),\r\n        },\r\n      ], false);\r\n\r\n      $scope.patchApplied = true;\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * drawChart - draw chart with updated data\r\n     *\r\n     * @param {Object} $scope angular $scope\r\n     *\r\n     * @return {Object} Promise object\r\n     */\r\n    drawChart($scope, app) {\r\n      const defer = $q.defer();\r\n      const layout = $scope.layout;\r\n\r\n      // const dimension = utils.validateDimension(layout.props.dimensions[0]);\r\n      const requestPage = [{\r\n        qTop: 0,\r\n        qLeft: 0,\r\n        qWidth: 6,\r\n        qHeight: 1,\r\n      }];\r\n\r\n      $scope.backendApi.getData(requestPage).then((dataPages) => {\r\n        // Display error when all measures' grand total return NaN.\r\n        if (dataPages[0].qMatrix[0][1].qText.length === 0 || dataPages[0].qMatrix[0][1].qText == '-') {\r\n          utils.displayConnectionError($scope.extId);\r\n        } else {\r\n          const palette = utils.getDefaultPaletteColor();\r\n\r\n          const text = JSON.parse(dataPages[0].qMatrix[0][1].qText)[0];\r\n          const weight = JSON.parse(dataPages[0].qMatrix[0][1].qText)[1];\r\n\r\n          const dataset = [];\r\n          for (let i = 0; i < text.length; i++) {\r\n            dataset.push(\r\n              {\r\n                text: text[i],\r\n                weight: weight[i],\r\n                handlers: {\r\n                  click: function() {\r\n                    app.selectAssociations(0, [text[i]], { qSearchFields:  [utils.validateDimension(layout.props.dimensions[1])] })\r\n                  },\r\n                },\r\n              },\r\n            );\r\n          }\r\n\r\n          // Set HTML element for chart\r\n          $(`.advanced-analytics-toolsets-${$scope.extId}`).html(`<div style=\"width:100%; height:100%\" id=\"aat-chart\"></div>`);\r\n\r\n          wordCloud.draw(dataset);\r\n        }\r\n        return defer.resolve();\r\n      });\r\n      return defer.promise;\r\n    },\r\n  };\r\n});\r\n"]}