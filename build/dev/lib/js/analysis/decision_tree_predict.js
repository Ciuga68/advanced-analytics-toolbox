"use strict";define(["../chart/tree_chart","../../vendor/d3.min","../util/utils","ng!$q"],function(t,e,a,r){return{createCube:function(t,e){var r=e.layout,n=a.validateDimension(r.props.dimensions[0]),s=[{qDef:{qFieldDefs:[n]}}],d=r.props.measures.length,l=a.validateMeasure(r.props.measures[0])+" as mea0, "+a.validateMeasure(r.props.measures[1])+" as mea1",o="mea0 ~ mea1",i="SS";e.paramNames=["mea0","mea1"],e.measureLabels=[r.props.measures[0].label,r.props.measures[1].label];for(var p=2;p<d;p++){var h=a.validateMeasure(r.props.measures[p]);if(h.length>0){var m=","+h+" as mea"+p;l+=m,o+=" + mea"+p,i+="S",e.paramNames.push("mea"+p),e.measureLabels.push(r.props.measures[p].label)}}var c="training_data<-q;";if(r.props.splitDataset){for(var u="splitPercentage<-min(max(0.01, "+r.props.splitPercentageForDecisionTree+"), 0.99); data_end<-length(q$mea0); data_mid<-floor(data_end * splitPercentage); training_data<-list(mea0=q$mea0[1:data_mid]",f="test_data<-list(mea0=q$mea0[(data_mid + 1):data_end]",b=1;b<d;b++)u+=",mea"+b+"=q$mea"+b+"[1:data_mid]",f+=",mea"+b+"=q$mea"+b+"[(data_mid + 1):data_end]";u+=");",f+=");",c=u+f}var q="class",g="";"anova"===r.props.rpartMethod&&(q="vector",g=",mean(abs(test_data$mea0-pred))");var y=[{qDef:{qDef:"R.ScriptEvalExStr('"+i+"','library(rpart);library(jsonlite);set.seed(10);\n                    q<-lapply(q, function(x){ ifelse(!is.na(as.numeric(x)), as.numeric(x), x) }); "+c+"\n                    res<-rpart("+o+', data=training_data, method="'+r.props.rpartMethod+'", control=list(minsplit='+r.props.minSplit+", minbucket="+r.props.minBucket+", cp="+r.props.cp+", maxdepth="+r.props.maxDepth+'));\n                    pred <- predict(res, test_data, type="'+q+'"); conf.mat <- table(pred, test_data$mea0);\n                    json<-toJSON(list(list(attributes(conf.mat)$dimnames[[1]], attributes(conf.mat)$dimnames[[2]]), unname(split(conf.mat, seq(nrow(conf.mat)))), c(length(training_data$mea0), length(test_data$mea0))'+g+")); json;',"+l+")"}},{qDef:{qLabel:"-",qDef:""}},{qDef:{qLabel:"-",qDef:""}},{qDef:{qLabel:"-",qDef:""}},{qDef:{qLabel:"-",qDef:""}}];return e.backendApi.applyPatches([{qPath:"/qHyperCubeDef/qDimensions",qOp:"replace",qValue:JSON.stringify(s)},{qPath:"/qHyperCubeDef/qMeasures",qOp:"replace",qValue:JSON.stringify(y)}],!1),e.patchApplied=!0,null},drawChart:function(t,e){var n=r.defer(),s=t.layout,d=[{qTop:0,qLeft:0,qWidth:6,qHeight:1}];return t.backendApi.getData(d).then(function(e){if(0===e[0].qMatrix[0][1].qText.length||"-"==e[0].qMatrix[0][1].qText)a.displayConnectionError(t.extId);else{for(var r=JSON.parse(e[0].qMatrix[0][1].qText),d=r[0][0],l=r[0][1],o=r[1],i=r[2],p=function(t,e){return Math.round(t*Math.pow(10,e))/Math.pow(10,e)},h='\n            <h2>Confusion matrix:</h2>\n            <table class="simple" >\n              <thead>\n                <tr>\n                  <th rowspan="2" style="border-right:none;"></th><th rowspan="2"></th><th colspan="'+(l.length+1)+'" style="text-align:center">Actual class</th>\n                </tr>\n                <tr>\n                  ',m=0;m<l.length;m++)h+="<th>"+l[m]+"</th>";h+="<th>Precision</th></tr>\n            </thead>\n            <tbody>";for(var c=0,u=0,f=[],b=[],q=[],g=[],y=0;y<l.length;y++)b[y]=0,q[y]=0;for(var v=0;v<d.length;v++){h+=0===v?'<tr><td rowspan="'+(d.length+1)+'" style="font-weight:bold; white-space:nowrap; width:20px">Predicted class</td><td style="font-weight:bold">'+d[v]+"</td>":'<tr><td style="font-weight:bold">'+d[v]+"</td>";for(var x=0,M=0,D=0;D<l.length;D++)u+=o[v][D],M+=o[v][D],q[D]+=o[v][D],v===D&&(c+=o[v][D],x+=o[v][D],b[D]+=o[v][D]),h+="<td>"+o[v][D]+"</td>";f.push(x/M),h+="class"===s.props.rpartMethod?"<td>"+p(x/M*100,3)+"%</td></tr>":"<td>-</td></tr>"}h+='<tr><td style="font-weight:bold;">Recall</td>';for(var _=0;_<b.length;_++)h+="class"===s.props.rpartMethod?"<td>"+p(b[_]/q[_]*100,3)+"%</td>":"<td>-</td>",g.push(b[_]/q[_]);h+="<td></td></tr>",h+="</tbody>\n                  </table>";var w=function(t){return t.reduce(function(t,e,a,r){return t+e})},P=function(t,e){return w(t,e)/t.length};h+="anova"===s.props.rpartMethod?'<h2>Performance measures:</h2>\n                  <table class="simple" style="table-layout:fixed;">\n                    <thead>\n                      <tr>\n                        <th>Measures</th><th>Results</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr><td>Mean absolute error (MAE)</td><td>'+r[3]+"</td></tr>\n                    </tbody>\n                  </table>\n                ":'<h2>Performance measures:</h2>\n                  <table class="simple" style="table-layout:fixed;">\n                    <thead>\n                      <tr>\n                        <th>Measures</th><th>Results</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr><td>Accuracy</td><td>'+("class"===s.props.rpartMethod?p(c/u*100,3)+"%":"-")+"</td></tr>\n                      <tr><td>Average precision</td><td>"+("class"===s.props.rpartMethod?p(100*P(f),3)+"%":"-")+"</td></tr>\n                      <tr><td>Average recall</td><td>"+("class"===s.props.rpartMethod?p(100*P(g),3)+"%":"-")+"</td></tr>\n                    </tbody>\n                  </table>\n                ",h+='<h2>Number of rows:</h2>\n                  <table class="simple" style="table-layout:fixed;">\n                    <thead>\n                      <tr>\n                        <th>Datasets</th><th>Number of rows</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr><td>Training data</td><td>'+i[0]+"</td></tr>\n                      <tr><td>Test data</td><td>"+i[1]+"</td></tr>\n                      <tr><td>Total</td><td>"+(i[0]+i[1])+"</td></tr>\n                    </tbody>\n                  </table>\n                ",$(".advanced-analytics-toolsets-"+t.extId).html(h)}return n.resolve()}),n.promise}}});
//# sourceMappingURL=../../maps/analysis/decision_tree_predict.js.map
